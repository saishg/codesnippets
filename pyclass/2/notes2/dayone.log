Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> 
>>> s = [10, 20, 30, 40]
>>> s[0]
10
>>> s[50]

Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    s[50]
IndexError: list index out of range
>>> s[len(s)]

Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
    s[len(s)]
IndexError: list index out of range
>>> s[len(s) - 1]
40
>>> s[-1]
40
>>> 
>>> 
>>> s = [10, 20, 30, 40]
>>> s[0:2]
[10, 20]
>>> s[:2]
[10, 20]
>>> s[1:4]
[20, 30, 40]
>>> s[1:len(s)]
[20, 30, 40]
>>> s[1:]
[20, 30, 40]
>>> 
>>> 
>>> 
>>> s[2:50]
[30, 40]
>>> s = 'abcde'
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> s[1]
20
>>> s[1] = 222
>>> s
[10, 222, 30, 40, 50]
>>> 
>>> s[1:3] = [22222, 33333]
>>> s
[10, 22222, 33333, 40, 50]
>>> s[1:3] = 'abcde'
>>> s
[10, 'a', 'b', 'c', 'd', 'e', 40, 50]
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> s[2:2] = [1, 2, 3]
>>> s
[10, 20, 1, 2, 3, 30, 40, 50]
>>> 
>>> s[:] = ['a', 'b', 'c']
>>> s
['a', 'b', 'c']
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> s[:] = []
>>> s
[]
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> s[3]
40
>>> del s[3]
>>> s
[10, 20, 30, 50]
>>> del s[1:3]
>>> s
[10, 50]
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> del s[:]
>>> 
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> del s[:]
>>> s
[]
>>> s[:] = []
>>> 
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> t = s                    # Assignments NEVER make copies
>>> u = s[:]                 # Slices conceptually ALWAYS make copies
>>> 
>>> s is t
True
>>> hex(id(s))
'0x104197950'
>>> hex(id(t))
'0x104197950'
>>> hex(id(u))
'0x10419ec68'
>>> s
[10, 20, 30, 40, 50]
>>> t
[10, 20, 30, 40, 50]
>>> u
[10, 20, 30, 40, 50]
>>> s = [10, 20, 30, 40, 50]
>>> t = s                    # Assignments NEVER make copies
>>> u = s[:]                 # Slices conceptually ALWAYS make copies
>>> 
>>> s.append(60)
>>> t
[10, 20, 30, 40, 50, 60]
>>> s
[10, 20, 30, 40, 50, 60]
>>> u
[10, 20, 30, 40, 50]
>>> 
>>> del s[2]
>>> s
[10, 20, 40, 50, 60]
>>> t
[10, 20, 40, 50, 60]
>>> del s[:]
>>> s
[]
>>> t
[]
>>> u
[10, 20, 30, 40, 50]
>>> s = [10, 20, 30, 40, 50]
>>> t = s
>>> s[:] = []
>>> t
[]
>>> 
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> t = s
>>> # s[:] = []
>>> s = []
>>> s
[]
>>> t
[10, 20, 30, 40, 50]
>>> 
>>> 
>>> # s[:] = [] Take everything in s and replace it with nothing
>>> #           Anything refering to that list sees the change
>>> # s = []    Make a NEW empty list and let s refer to it
>>> #           t still refers to the old list
>>> 
>>> 
>>> [10, 20, 30] * 2
[10, 20, 30, 10, 20, 30]
>>> s = [0] * 10
>>> s
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
>>> s = [[]] * 10
>>> s
[[], [], [], [], [], [], [], [], [], []]
>>> s[0]
[]
>>> s[0].append(10)
>>> s
[[10], [10], [10], [10], [10], [10], [10], [10], [10], [10]]
>>> 
>>> 
>>> 
>>> s = [x**2 for x in range(10)]
>>> s
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> s = [[] for x in range(10)]
>>> s
[[], [], [], [], [], [], [], [], [], []]
>>> s[0].append(10)
>>> s
[[10], [], [], [], [], [], [], [], [], []]
>>> 
>>> 
>>> s = [[] for x in range(10)]
>>> s = [[]] * 10
>>> 
>>> 
>>> 
>>> 
>>> #   s[4:12] = []       del s[4:14]
>>> 
>>> 
>>> # RaymondTel 3003
>>> 2 ** 3
8
>>> # 000 001 010 011 100 101 110 111
>>> # RaymondTel 4004
>>> 2 ** 4
16
>>> # bit 0 is a sign bit
>>> # 1xyz
>>> # 1xyz    negative  8
>>> # 0000    zero
>>> #         positive  7
>>> # -32768 <= x <= 32767
>>> 
>>> # ~x    is closed
>>> # -x    is not closed
>>> 
>>> -0
0
>>> -0.0
-0.0
>>> -0.0 == 0.0
True
>>> import math
>>> math.copysign(4, -3)
-4.0
>>> math.copysign(4, -0.0)
-4.0
>>> math.copysign(4, 0.0)
4.0
>>> 
>>> math.copysign(4, 0)
4.0
>>> math.copysign(4, -0)
4.0
>>> s = 'abc'
>>> x = 5; print x**5
3125
>>> 
>>> 
>>> s = 'abc'
>>> i = 3; s[-i:]         # last three characters
'abc'
>>> i = 2; s[-i:]         # last two characters
'bc'
>>> i = 1; s[-i:]         # last one characters
'c'
>>> i = 0; s[-i:]         # last zero characters <-- You wish!
'abc'
>>> 
>>> i = 3; s[:-i]         # all except the last three characters
''
>>> i = 2; s[:-i]        # all except the last two characters
'a'
>>> i = 1; s[:-i]        # all except the last one characters
'ab'
>>> i = 0; s[:-i]        # Doh!
''
>>> 
>>> s = 'download.html'
>>> i = s.find('.')
>>> i
8
>>> len(s)
13
>>> s[8]
'.'
>>> s[13 - 5]
'.'
>>> s[len(s) - 5]
'.'
>>> s[-5]
'.'
>>> s[8] == s[-5]
True
>>> 
>>> s = 'download.html'
>>> s[:8]
'download'
>>> s[:-5]
'download'
>>> s[8:]
'.html'
>>> s[-5:]
'.html'
>>> 
>>> 
>>> s = 'index.html'
>>> s[:-5]
'index'
>>> s[-5:]
'.html'
>>> 
>>> 
>>> 
>>> 
>>> s = [10, 20, 30, 40, 50]
>>> s[5] + 100

Traceback (most recent call last):
  File "<pyshell#202>", line 1, in <module>
    s[5] + 100
IndexError: list index out of range
>>> s = [10, 20, 30, 40, 50]
>>> s[2] + 100
130
>>> s
[10, 20, 30, 40, 50]
>>> s[2] += 100
>>> s
[10, 20, 130, 40, 50]
>>> 
>>> 
>>> s[2:4]
[130, 40]
>>> s[2:4] = [111, 222]
>>> s
[10, 20, 111, 222, 50]
>>> 
>>> 
>>> # tuple packing and unpacking
>>> # simultaneous assignment
>>> a, b = 10, 20
>>> 
>>> a = 10
>>> b = 20
>>> 
>>> 
>>> 
>>> 
>>> def square(x):
	return x * x

>>> square(5)
25
>>> square(6)
36
>>> square(5)
25
>>> square(6)
36
>>> # Pure functions have the same output for the same inputs
>>> # every time AND they have no side-effects.
>>> 
>>> from random import random
>>> random()
0.8768426677388286
>>> random()
0.8865498342524339
>>> from time import time, ctime
>>> time()
1459192486.659135
>>> ctime()
'Mon Mar 28 12:14:51 2016'
>>> time()
1459192495.926822
>>> ctime()
'Mon Mar 28 12:14:57 2016'
>>> 
>>> 
>>> x = 10
>>> y = 20
>>> def f(x):
	print x + y

	
>>> f(5)
25
>>> def f(x):
	y = x + 1
	print x * y

	
>>> f(5)
30
>>> x
10
>>> y
20
>>> globals()['x']
10
>>> globals()['x'] = 11
>>> x
11
>>> x = 11
>>> 
>>> 
>>> 
>>> 
>>> # Lookup:  locals()  ->  globals()  ->  __builtins__ -> NameError
>>> # Writes by default always go into locals
>>> # unless explicitly declared as globals
>>> 
>>> 
=============================== RESTART: Shell ===============================
>>> x = 10
>>> locals()['x']
10
>>> globals()['x']
10
>>> 
>>> locals() is globals()
True
>>> 
=============================== RESTART: Shell ===============================
>>> x = 10
>>> def f(x):
	y = x + 1
	print locals()
	return x * y

>>> f(5)
{'y': 6, 'x': 5}
30
>>> globals()['x']
10
>>> def f(x):
	y = x + 1
	print locals()
	print globals()['x']
	return x * y

>>> f(5)
{'y': 6, 'x': 5}
10
30
>>> 
>>> 
>>> def f(x):
	global y
	y = y + 1
	return x * y

>>> x = 10
>>> y = 20
>>> 
>>> f(5)
105
>>> x
10
>>> y
21
>>> 
>>> 
>>> 
>>> def f(x):
	global y
	y = y + 1
	return x * y

>>> x = 10
>>> y = 20
>>> 
>>> 
>>> a = f(5)
>>> b = f(5)
>>> 
>>> a
105
>>> b
110
>>> def f(x):
	global y
	y = y + 1
	return x * y

>>> x = 10
>>> y = 20
>>> 
>>> a, b = f(5), f(25)
>>> a
105
>>> b
550
>>> 
>>> x = 10
>>> y = 20
>>> 
>>> b, a = f(25), f(5)
>>> a
110
>>> b
525
>>> def f(x):
	print x
	return x + 1

>>> a, b = f(10), f(20)
10
20
>>> 
>>> 
>>> a, b, a = 10, 20, 30
>>> 
>>> a
30
>>> 
>>> 
>>> a, b, a = 10, 20, 30
>>> 
>>> 
>>> i = 0
>>> arr = [10, 20, 30]
>>> 
>>> i, arr[i] = i+1, 40
>>> 
>>> arr
[10, 40, 30]
>>> 
>>> 
>>> i = 0
>>> arr = [10, 20, 30]
>>> 
>>> arr[i], i = 40, i+1
>>> arr
[40, 20, 30]
>>> 
>>> 
>>> 
>>> s = [10, 20, 30, 40]
>>> def replace_squares(arr):
	for i in range(len(arr)):
		arr[i] *= arr[i]

	
>>> replace_squares(s)
>>> s
[100, 400, 900, 1600]
>>> def squares(arr):
	return [x**2 for x in arr]

>>> s = [10, 20, 30, 40]
>>> squares(s)
[100, 400, 900, 1600]
>>> 
>>> s
[10, 20, 30, 40]
>>> 
>>> s[:] = squares(s)
>>> s
[100, 400, 900, 1600]
>>> 
>>> 
>>> s = [10, 15, 20, 25, 30]
>>> def even_squares(arr):
	return [x**2 for x in arr if x % 2 ==0]

>>> even_squares(s)
[100, 400, 900]
>>> s[:] = even_squares(s)
>>> s
[100, 400, 900]
>>> 
>>> 
>>> # Mutating in-place is complicated when you add or delete
>>> # Develop a preference for creating new output
>>> # And if necessary, then replace the original
>>> # It is reasonable to use exceptions for control flow in Python.
>>> 
>>> 
>>> 
>>> data = [1, 1, 1, 2, 3, 3, 4, 4, 4, 1, 1]
>>> from itertools import groupby
>>> for group, elements in groupby(data):
	print group

	
1
2
3
4
1
>>> for group, elements in groupby(data):
	print list(elements)

	
[1, 1, 1]
[2]
[3, 3]
[4, 4, 4]
[1, 1]
>>> for group, elements in groupby(data):
	print group, '-->', len(list(elements))

	
1 --> 3
2 --> 1
3 --> 2
4 --> 3
1 --> 2
>>> data = [1, 1, 1, 2, 3, 3, 4, 4, 4, 1, 1]
>>> [group for group, elements in groupby(data)]
[1, 2, 3, 4, 1]
>>> 

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
>>> area(10)
314.152
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
>>> area.__name__               # dunder -> double under
'area'
>>> f = area
>>> f.__name__
'area'
>>> f(10)
314.152
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
>>> help(area)
Help on function area in module __main__:

area(radius)
    Compute the area of the circle
    
    >>> area(10)
    314.152

>>> area.__name__
'area'
>>> area.__doc__
' Compute the area of the circle\n\n        >>> area(10)\n        314.152\n    '
>>> 
>>> 
>>> def myhelp(func):
	print 'Custom help'
	print 'Name:', func.__name__
	print 'What is does:'
	print func.__doc__

	
>>> myhelp(area)
Custom help
Name: area
What is does:
 Compute the area of the circle

        >>> area(10)
        314.152
    
>>> # introspection
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
Howdy!
>>> 
=============================== RESTART: Shell ===============================
>>> import algebra
>>> algebra.math(10)

Traceback (most recent call last):
  File "<pyshell#421>", line 1, in <module>
    algebra.math(10)
TypeError: 'module' object is not callable
>>> algebra.area(10)
314.152
>>> import xyzpdq

Traceback (most recent call last):
  File "<pyshell#423>", line 1, in <module>
    import xyzpdq
ImportError: No module named xyzpdq
>>> 
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=1)
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
**********************************************************************
File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 12, in __main__.area
Failed example:
    area(10)
Expected:
    314.152
Got:
    314.252
**********************************************************************
1 items had failures:
   1 of   1 in __main__.area
***Test Failed*** 1 failures.
TestResults(failed=1, attempted=1)
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=1)
>>> help(area)
Help on function area in module __main__:

area(radius)
    Compute the area of the circle
    
    >>> area(10)
    314.152

>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=1)
>>> area_triangle(10, 20)
100.0
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=2)
>>> area_triangle(-10, 20)
-100.0
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=2)
>>> area_triangle(-10, 20)

Traceback (most recent call last):
  File "<pyshell#428>", line 1, in <module>
    area_triangle(-10, 20)
  File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 26, in area_triangle
    raise RuntimeError('Imaginary numbers not applicable to Kronecker spaces. '
RuntimeError: Imaginary numbers not applicable to Kronecker spaces. Try resetting microcontroller L145
>>> 
>>> 
>>> print 'Three\nblind\nmice\n'
Three
blind
mice

>>> print '''Three
blind
mice
'''
Three
blind
mice

>>> type(2)
<type 'int'>
>>> type(2.0)
<type 'float'>
>>> x = 2
>>> 
>>> 3.5 * x
7.0
>>> float.__mul__(3.5, 2)
7.0
>>> tx = float(x)
>>> 
>>> x is tx
False
>>> x
2
>>> tx
2.0
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=2)
>>> x1, x2 = quadratic(a=6, b=28, c=30)
>>> x1
-1.6666666666666667
>>> x2
-3.0
>>> 6*x1**2 + 28*x1 + 30
-3.552713678800501e-15
>>> 6*x2**2 + 28*x2 + 30
0.0
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
TestResults(failed=0, attempted=7)
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/algebra.py ==========
**********************************************************************
File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 44, in __main__.quadratic
Failed example:
    x2
Expected:
    -3.0
Got:
    -2.0
**********************************************************************
File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 48, in __main__.quadratic
Failed example:
    6*x2**2 + 28*x2 + 30
Expected:
    0.0
Got:
    -2.0
**********************************************************************
1 items had failures:
   2 of   5 in __main__.quadratic
***Test Failed*** 2 failures.
TestResults(failed=2, attempted=7)
>>> 
>>> # http://bit.ly/python-sj139
>>> # http://bit.ly/py-install
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task:  show the colors in uppercase
>>> colors[0]
'red'
>>> colors[1]
'blue'
>>> len(colors)
4
>>> range(4)
[0, 1, 2, 3]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
0 -> raymond
1 -> rachel
2 -> matthew
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
0 -> raymond
1 -> rachel
2 -> matthew
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1000 -> raymond
1001 -> rachel
1002 -> matthew
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
>>> colors
['red', 'blue', 'yellow', 'green']
>>> colors[3]
'green'
>>> colors[2]
'yellow'
>>> colors[1]
'blue'
>>> colors[0]
'red'
>>> [3, 2, 1, 0]
[3, 2, 1, 0]
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> len(range(10))
10
>>> range(2, 10)
[2, 3, 4, 5, 6, 7, 8, 9]
>>> len(range(2, 10))
8
>>> range(2, 10, 3)
[2, 5, 8]
>>> # START STOP STEP
>>> [3, 2, 1, 0]
[3, 2, 1, 0]
>>> range(3, 0, -1)
[3, 2, 1]
>>> range(3, -1, -1)
[3, 2, 1, 0]
>>> len(colors)
4
>>> range(len(colors)-1, -1, -1)
[3, 2, 1, 0]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
>>> names
['raymond', 'rachel', 'matthew']
>>> colors
['red', 'blue', 'yellow', 'green']
>>> 
>>> 
>>> 
>>> # Algol derivatives:  Ternary operator or conditional expression
>>> 
>>> x = 3
>>> -x
-3
>>> x + 3# Algol derivatives:  Ternary operator or conditional expression
6
>>> # Algol derivatives:  Ternary operator or conditional expression
>>> # (cond) ? posres : negres;
>>> #  result = (score >= 70) ? "pass" : "fail";
>>> 
>>> # Python way:
>>> #   posres if cond else negres
>>> score = 55
>>> 'pass' if score >= 70 else 'fail'
'fail'
>>> score = 85
>>> 'pass' if score >= 70 else 'fail'
'pass'
>>> 
>>> 
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/looping_idioms.py", line 29, in <module>
    print '%s -> %s' % (names[i], colors[i])
IndexError: list index out of range
>>> n
4
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
>>> 
>>> 
>>> min(30, 5, 60)
5
>>> max(30, 5, 60)
60
>>> len([30, 5, 60])
3
>>> sum([30, 5, 60])
95
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
>>> 
>>> 
>>> # mapcar
>>> # car  -> head
>>> # cdr  -> tail
>>> 
>>> zip(names, colors)
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
>>> from itertools import *
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
>>> zip(names, colors)
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
>>> it = izip(names, colors)
>>> it
<itertools.izip object at 0x1038d0b48>
>>> next(it)
('raymond', 'red')
>>> next(it)
('rachel', 'blue')
>>> next(it)
('matthew', 'yellow')
>>> next(it)

Traceback (most recent call last):
  File "<pyshell#519>", line 1, in <module>
    next(it)
StopIteration
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
None -> green
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
>>> 
>>> 
>>> s = [10, 20, 30]
>>> t = [40, 50]
>>> for x in chain(s, t):
	print x

	
10
20
30
40
50
>>> 
>>> it = repeat('I WIL SAY IT AGAIN')
>>> next(it)
'I WIL SAY IT AGAIN'
>>> next(it)
'I WIL SAY IT AGAIN'
>>> next(it)
'I WIL SAY IT AGAIN'
>>> 
>>> 
>>> s = [10, 20, 30, 40]
>>> t = [40, 50]
>>> zip(chain(s, repeat(0)), t)
[(10, 40), (20, 50)]
>>> 
>>> s = [10, 20]
>>> t = [1, 2, 3, 4]
>>> zip(chain(s, repeat(0)), t)
[(10, 1), (20, 2), (0, 3), (0, 4)]
>>> 
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
>>> 
>>> len('hello')
5
>>> 
>>> colors
['red', 'blue', 'yellow', 'green']
>>> deco = [(len(color), color) for color in colors]
>>> deco
[(3, 'red'), (4, 'blue'), (6, 'yellow'), (5, 'green')]
>>> deco.sort()
>>> deco
[(3, 'red'), (4, 'blue'), (5, 'green'), (6, 'yellow')]
>>> [color for size, color in deco]
['red', 'blue', 'green', 'yellow']
>>> # DSU:  Decorate-Sort-Undecorate     Schwartzian Transform
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors by the length of the colors
['red', 'blue', 'yellow', 'green']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
>>> 
>>> color = 'red'
>>> color[-1]
'd'
>>> lambda x: x*x
<function <lambda> at 0x1007ef500>
>>> (lambda x: x*x)(6)
36
>>> 200 + (lambda x: x*x)(6) + 100
336
>>> 
>>> 
>>> colors
['red', 'blue', 'yellow', 'green']
>>> [len(colors[0]), len(colors[1]), len(colors[2]), len(colors[3])]
[3, 4, 6, 5]
>>> map(len, colors)
[3, 4, 6, 5]
>>> 
>>> map(lambda x: x*x, range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 6:  Show the colors ordered by the last letter of the color
['red', 'blue', 'green', 'yellow']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 6:  Show the colors ordered by the next to last letter of the color
['red', 'green', 'yellow', 'blue']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 7:  Show the colors ordered by the next to last letter of the color
['red', 'green', 'yellow', 'blue']
Task 8:  Show the cities without duplicates
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 7:  Show the colors ordered by the next to last letter of the color
['red', 'green', 'yellow', 'blue']
Task 8:  Show the cities without duplicates
CHICAGO
AUSTIN
DALLAS
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 7:  Show the colors ordered by the next to last letter of the color
['red', 'green', 'yellow', 'blue']
Task 8:  Show the cities without duplicates
AUSTIN
CHICAGO
DALLAS
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/looping_idioms.py =======
Task 1:  show the colors in uppercase
RED
BLUE
YELLOW
GREEN
RED
BLUE
YELLOW
GREEN
Task 2:  show the names and the position of each name in the list
1 -> raymond
2 -> rachel
3 -> matthew
1 -> raymond
2 -> rachel
3 -> matthew
Task 3:  show the colors in reverse order
green
yellow
blue
red
green
yellow
blue
red
Task 4:  display the names with the corresponding colors, ignoring mismatches
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
raymond -> red
rachel -> blue
matthew -> yellow
unknown -> green
Task 5:  Show the colors alphabetically
Blue
Green
Red
Yellow
Task 6:  Show the colors ordered by the length of the colors
['red', 'blue', 'yellow', 'green']
['red', 'blue', 'green', 'yellow']
Task 7:  Show the colors ordered by the next to last letter of the color
['red', 'green', 'yellow', 'blue']
Task 8:  Show the cities without duplicates
AUSTIN
CHICAGO
DALLAS
>>> 
>>> 
>>> names
['raymond', 'rachel', 'matthew']
>>> map(str.upper, names)
['RAYMOND', 'RACHEL', 'MATTHEW']
>>> map(len, names)
[7, 6, 7]
>>> map(type, names)
[<type 'str'>, <type 'str'>, <type 'str'>]
>>> map(ord, 'Raymond')
[82, 97, 121, 109, 111, 110, 100]
>>> 
>>> 
>>> 
>>> 
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> # list.sort() is a method on lists that sorts a LIST in-place
>>> # sorted(iterable) is a builtin function that takes ANY ITERABLE and produces a NEW list
>>> 
>>> 
>>> s = 'cat'
>>> t = list(s)
>>> t.sort()
>>> t
['a', 'c', 't']
>>> 
>>> 
>>> sorted(s)
['a', 'c', 't']
>>> 
>>> 
>>> s = 'hello'
>>> s[0]
'h'
>>> s.__getitem__(0)
'h'
>>> class A:
	def __init__(self, x):
		self.x = 10
	def __getitem__(self, index):
		return self.x * index

	
>>> class A:
	def __init__(self, x):
		self.x = x
	def __getitem__(self, index):
		return self.x * index

	
>>> a = A(111)
>>> a[3]
333
>>> a[6]
666
>>> b = A(100)
>>> b[3]
300
>>> b[6]
600
>>> def cube(x):
	return x**3

>>> cube(5)
125
>>> cube.__call__(5)
125
>>> 
>>> 
>>> 
>>> class A:
	def __init__(self, x):
		self.x = x
	def __getitem__(self, index):
		return self.x * index
	def triple(self):
		return self.x * 3

	
>>> 
>>> a = A(100)
>>> a.x
100
>>> a.y

Traceback (most recent call last):
  File "<pyshell#622>", line 1, in <module>
    a.y
AttributeError: A instance has no attribute 'y'
>>> 
>>> a.triple()
300
>>> 3 + 4 - 1
6
>>> 
>>> t = 3 + 4
>>> t - 1
6
>>> 
>>> 
>>> 3 + 4 - 1
6
>>> t = 3 + 4
>>> t - 1
6
>>> 
>>> 
>>> 
>>> 
>>> a.triple()
300
>>> a . triple ()
300
>>> bm = a . triple
>>> bm()
300
>>> bm
<bound method A.triple of <__main__.A instance at 0x10419f950>>
>>> 
>>> 
>>> # .    __getattribute__
>>> 
>>> 
>>> dir(object)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> c.rad
10
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 

>>> 
