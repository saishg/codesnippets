changeset:   9:b7ab0c419165
tag:         tip
user:        Raymond Hettinger <python@rcn.com>
date:        Wed Mar 30 17:11:44 2016 -0700
summary:     Use the @notation to beautify the decorators

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -29,7 +29,7 @@
 
     __slots__ = ['diameter']                # Implement the Flyweight Design Pattern, saving memory by eliminating the instance dictionaries
 
-    version = Version(0, 9, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 10, 1)             # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -55,28 +55,22 @@
     def __repr__(self):
         return '%s(%r)' % (self.__class__.__name__, self.radius)
 
+    @staticmethod                                   # Reprograms the dot to NOT add "self" as the first argument
     def angle_to_grade(angle):                      # Use case is attaching regular functions to classes to improve findability which is a human factors problem
         'Convert an inclinometer reading in degrees into a percent grade'
         return math.tan(math.radians(angle)) * 100.0
 
-    angle_to_grade = staticmethod(angle_to_grade)   # Reprograms the dot to NOT add "self" as the first argument
-
+    @classmethod                                    # Reprograms the dot to add the class as the first argument
     def from_bbd(cls, bbd):                         # Use case alternative constructors
         'Construct a new circle from a bounding box diagonal'
         radius = bbd / 2.0 / math.sqrt(2.0)
         return cls(radius)
 
-    from_bbd = classmethod(from_bbd)                # Reprograms the dot to add the class as the first argument
-
-    def get_radius(self):
+    @property
+    def radius(self):
         return self.diameter / 2.0
 
-    def set_radius(self, radius):
+    @radius.setter                                   # Reprograms the dot to convert attribute access like c.radius into method access like c.get_radius()
+    def radius(self, radius):
         self.diameter = radius * 2.0
 
-    # FGM:  I wish that everywhere someone (including me) wrote c.radius
-    # that MAGICALLY c.get_radius would be called, AND everywhere someone
-    # (including me) wrote c.radius=value that MAGICALLY c.set_radius(value)
-    # would be called without me changing ANY existing code.
-
-    radius = property(get_radius, set_radius)       # Reprograms the dot to convert attribute access like c.radius into method access like c.get_radius()

changeset:   8:687128ceedc5
user:        Raymond Hettinger <python@rcn.com>
date:        Wed Mar 30 11:04:39 2016 -0700
summary:     Reduce memory footprint by use of slots

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -27,7 +27,9 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 8, 1)              # Class variables are SHARED by all instances and visible from the class
+    __slots__ = ['diameter']                # Implement the Flyweight Design Pattern, saving memory by eliminating the instance dictionaries
+
+    version = Version(0, 9, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.

changeset:   7:5ef52e1379a2
user:        Raymond Hettinger <python@rcn.com>
date:        Wed Mar 30 10:55:10 2016 -0700
summary:     Add radius property

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -65,3 +65,16 @@
         return cls(radius)
 
     from_bbd = classmethod(from_bbd)                # Reprograms the dot to add the class as the first argument
+
+    def get_radius(self):
+        return self.diameter / 2.0
+
+    def set_radius(self, radius):
+        self.diameter = radius * 2.0
+
+    # FGM:  I wish that everywhere someone (including me) wrote c.radius
+    # that MAGICALLY c.get_radius would be called, AND everywhere someone
+    # (including me) wrote c.radius=value that MAGICALLY c.set_radius(value)
+    # would be called without me changing ANY existing code.
+
+    radius = property(get_radius, set_radius)       # Reprograms the dot to convert attribute access like c.radius into method access like c.get_radius()
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -15,7 +15,7 @@
 from random import random, seed
 from pprint import pprint
 
-n = 10
+n = 10000
 jenny = 8675309
 print 'DARPA Grant Proposal'
 print 'to study the average area of circles'
@@ -26,7 +26,7 @@
 circles = [Circle(random()) for i in xrange(n)]
 areas = [circle.area() for circle in circles]
 average_area = sum(areas) / n
-print 'The average area is %.1f' % average_area
+print 'The average area is %.5f' % average_area
 print
 
 ## Rubber Sheet Company  #############################################
@@ -89,3 +89,6 @@
 # ISO 10666:   No circle software shall use an area() method that
 # accesses instance variables. It MUST call perimeter and infer
 # the radius indirectly.
+
+# ISO 10667:   No circle software shall store the radius.
+# It MUST store the diameter and only the diameter.

changeset:   6:cd34e7055d11
user:        Raymond Hettinger <python@rcn.com>
date:        Wed Mar 30 10:18:36 2016 -0700
summary:     Added class local reference from area to perimeter for the miltary client

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -27,7 +27,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 7, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 8, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -38,12 +38,16 @@
 
     def area(self):                         # Regular methods take "self" as the first argument
         'Perform quadrature on a planar shape of uniform revolution'
-        return math.pi * self.radius ** 2.0
+        p = self.__perimeter()              # Class local reference, because sometimes you need "self" to really be you
+        radius = p / 2.0 / math.pi
+        return math.pi * radius ** 2.0
 
     def perimeter(self):
         'Compute the closed line integral for the locus of points equidistant from a given point'
         return 2.0 * math.pi * self.radius
 
+    __perimeter = perimeter                 # Name mangling to automatically prepend the name of the class
+
     # Best practice for repr is to look like how the object COULD have been created
     # Don't assume that "self" means you; instead, it could be one of your children
     def __repr__(self):
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -55,6 +55,8 @@
         return Circle.perimeter(self) * self.RUBBER_RATIO     # Extending a method  <-- The parent gets called and the results are modified
         return 2.0 * 3.14 * self.radius * self.RUBBER_RATIO   # Overriding a method <-- The parent doesn't get called
 
+    __perimeter = perimeter
+
 class MonsterTire(Tire):
 
     RUBBER_RATIO = 1.50
@@ -84,3 +86,6 @@
 print 'and perimeter of', c.perimeter()
 print
 
+# ISO 10666:   No circle software shall use an area() method that
+# accesses instance variables. It MUST call perimeter and infer
+# the radius indirectly.

changeset:   5:d02a51658583
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 17:43:50 2016 -0700
summary:     Add from_bbd classemethod to support the graphics company and tire companies

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -27,7 +27,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 5, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 7, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -55,3 +55,9 @@
 
     angle_to_grade = staticmethod(angle_to_grade)   # Reprograms the dot to NOT add "self" as the first argument
 
+    def from_bbd(cls, bbd):                         # Use case alternative constructors
+        'Construct a new circle from a bounding box diagonal'
+        radius = bbd / 2.0 / math.sqrt(2.0)
+        return cls(radius)
+
+    from_bbd = classmethod(from_bbd)                # Reprograms the dot to add the class as the first argument
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -74,3 +74,13 @@
 print u'An inclinometer reading of 5\N{degree sign}',
 print 'is a %.1f%% grade.' % Circle.angle_to_grade(5)
 print
+
+## National Graphics Company #########################################
+
+c = Circle.from_bbd(25)
+print 'A circle with a bounding box diagonal of 25'
+print 'has a radius of', c.radius
+print 'an area of', c.area()
+print 'and perimeter of', c.perimeter()
+print
+

changeset:   4:6f8fa4301006
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 17:22:32 2016 -0700
summary:     Add angle_to_grade staticmethod to support the trucking company

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -27,7 +27,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 4, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 5, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -36,7 +36,7 @@
     def __init__(self, radius):
         self.radius = radius                # Instances variables should be UNIQUE to each instance
 
-    def area(self):
+    def area(self):                         # Regular methods take "self" as the first argument
         'Perform quadrature on a planar shape of uniform revolution'
         return math.pi * self.radius ** 2.0
 
@@ -49,3 +49,9 @@
     def __repr__(self):
         return '%s(%r)' % (self.__class__.__name__, self.radius)
 
+    def angle_to_grade(angle):                      # Use case is attaching regular functions to classes to improve findability which is a human factors problem
+        'Convert an inclinometer reading in degrees into a percent grade'
+        return math.tan(math.radians(angle)) * 100.0
+
+    angle_to_grade = staticmethod(angle_to_grade)   # Reprograms the dot to NOT add "self" as the first argument
+
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -69,3 +69,8 @@
 print 'A monster tire has an odometer corrected outer perimeter of', m.perimeter()
 print
 
+## National Trucking Company #########################################
+
+print u'An inclinometer reading of 5\N{degree sign}',
+print 'is a %.1f%% grade.' % Circle.angle_to_grade(5)
+print

changeset:   3:fbf4accdab9d
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 16:34:01 2016 -0700
summary:     Fix a nonsubclassable repr.  Reporting the tire company.

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -10,6 +10,7 @@
 # 2) There is an immediate payoff with help(), pydoc, sphinx, tooltip, etc.
 # Give names to "magic constants".  Second benefit is making the value consistent in the module.
 # D.R.Y. :  Do Not Repeat Yourself.  is a code smell.
+#  ^--- There should be a SINGLE source of truth
 # Code Smell:  Code that works but is awkward to understand or maintain
 # Indicates a need to refactor
 # Long existing convention in many languages is that constants have uppercase variable names
@@ -26,7 +27,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 3, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 4, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -44,6 +45,7 @@
         return 2.0 * math.pi * self.radius
 
     # Best practice for repr is to look like how the object COULD have been created
+    # Don't assume that "self" means you; instead, it could be one of your children
     def __repr__(self):
-        return 'Circle(%r)' % self.radius
+        return '%s(%r)' % (self.__class__.__name__, self.radius)
 
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -42,3 +42,30 @@
     circle.radius *= 1.1          # circle.set_radius(circle.get_radius() * 1.1)
     print 'and a warm area of', circle.area()
     print
+
+## National Tire Chain  ##############################################
+
+class Tire(Circle):
+    'Circle analytics specialed for tires'
+
+    RUBBER_RATIO = 1.25
+
+    def perimeter(self):
+        'Perimeter corrected for the rubber on a tire'
+        return Circle.perimeter(self) * self.RUBBER_RATIO     # Extending a method  <-- The parent gets called and the results are modified
+        return 2.0 * 3.14 * self.radius * self.RUBBER_RATIO   # Overriding a method <-- The parent doesn't get called
+
+class MonsterTire(Tire):
+
+    RUBBER_RATIO = 1.50
+
+t = Tire(30)
+print 'A tire with an inner radius of', t.radius
+print 'has an inner area of', t.area()
+print 'and an odometer corrected outer perimeter of', t.perimeter()
+print
+
+m = MonsterTire(30)
+print 'A monster tire has an odometer corrected outer perimeter of', m.perimeter()
+print
+

changeset:   2:9e026107414e
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 15:43:53 2016 -0700
summary:     Added perimeter() to support the rubber sheet company

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -26,7 +26,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 2, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 3, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -39,6 +39,10 @@
         'Perform quadrature on a planar shape of uniform revolution'
         return math.pi * self.radius ** 2.0
 
+    def perimeter(self):
+        'Compute the closed line integral for the locus of points equidistant from a given point'
+        return 2.0 * math.pi * self.radius
+
     # Best practice for repr is to look like how the object COULD have been created
     def __repr__(self):
         return 'Circle(%r)' % self.radius
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -28,3 +28,17 @@
 average_area = sum(areas) / n
 print 'The average area is %.1f' % average_area
 print
+
+## Rubber Sheet Company  #############################################
+
+cut_template = [0.1, 0.2, 0.7]
+print 'Spec sheet for the cut template:', cut_template
+circles = [Circle(cut_radius) for cut_radius in cut_template]
+for i, circle in enumerate(circles, 1):
+    print 'Circle #%d' % i
+    print 'A rubber circle with a cut radius of', circle.radius
+    print 'has a perimeter of', circle.perimeter()
+    print 'and a cold area of', circle.area()
+    circle.radius *= 1.1          # circle.set_radius(circle.get_radius() * 1.1)
+    print 'and a warm area of', circle.area()
+    print

changeset:   1:be4fc4d315b4
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 15:10:25 2016 -0700
summary:     Added repr to support the academic users

diff --git a/circuitous.py b/circuitous.py
--- a/circuitous.py
+++ b/circuitous.py
@@ -26,7 +26,7 @@
 class Circle(object):
     'Advanced circle analytic toolkit'
 
-    version = Version(0, 1, 1)              # Class variables are SHARED by all instances and visible from the class
+    version = Version(0, 2, 1)              # Class variables are SHARED by all instances and visible from the class
 
     # The use of "self" is a cultural norm
     # Parameter names are user visible, part of the API and should be spelled-out.
@@ -39,5 +39,7 @@
         'Perform quadrature on a planar shape of uniform revolution'
         return math.pi * self.radius ** 2.0
 
+    # Best practice for repr is to look like how the object COULD have been created
+    def __repr__(self):
+        return 'Circle(%r)' % self.radius
 
-
diff --git a/client_code.py b/client_code.py
--- a/client_code.py
+++ b/client_code.py
@@ -1,5 +1,6 @@
 "Show-off circuitious from a user\'s point of view"
 
+from __future__ import division
 from circuitous import Circle
 
 c = Circle(10)
@@ -8,3 +9,22 @@
 print 'A circle with a radius of', c.radius
 print 'has an area of', c.area()
 print
+
+## Academic Friends ##################################################
+
+from random import random, seed
+from pprint import pprint
+
+n = 10
+jenny = 8675309
+print 'DARPA Grant Proposal'
+print 'to study the average area of circles'
+print 'using Circuitous version %d.%d' % Circle.version[:2]
+print 'preliminary study using %d random circles' % n
+print "seeded using Jenny's number:", jenny
+seed(jenny)
+circles = [Circle(random()) for i in xrange(n)]
+areas = [circle.area() for circle in circles]
+average_area = sum(areas) / n
+print 'The average area is %.1f' % average_area
+print

changeset:   0:6c7458d7cbe5
user:        Raymond Hettinger <python@rcn.com>
date:        Tue Mar 29 12:31:33 2016 -0700
summary:     MVP with Circle class, area() method, and a tutorial

diff --git a/circuitous.py b/circuitous.py
new file mode 100644
--- /dev/null
+++ b/circuitous.py
@@ -0,0 +1,43 @@
+''' Circuitous(tm)                                    # Give the project a name
+An Advanced Circle Analytics                          # Elevator Pitch --> What problem you solve and how you're solving it
+'''
+
+# New-style classes inherit from object
+# Inheritance is a tool for code re-use.  It allow one class to reuse the code from another.
+# object() has a __getattribute__ method that provides a reprogrammable dot.
+# Python programmers tend to document first.
+# 1) It better defines the problem, making it more solvable.
+# 2) There is an immediate payoff with help(), pydoc, sphinx, tooltip, etc.
+# Give names to "magic constants".  Second benefit is making the value consistent in the module.
+# D.R.Y. :  Do Not Repeat Yourself.  is a code smell.
+# Code Smell:  Code that works but is awkward to understand or maintain
+# Indicates a need to refactor
+# Long existing convention in many languages is that constants have uppercase variable names
+# M.V.P. -- Minimum Viable Product
+# YAGNI,RT -- You ain't gonna need it right now
+# "Code is your enemy"
+# "Dogfooding" -- Eat you own dogfood --> Be your own first user.
+
+import math                                 # The purpose of modules is for code organizaition and reuse
+from collections import namedtuple
+
+Version = namedtuple('Version', ['major', 'minor', 'micro'])
+
+class Circle(object):
+    'Advanced circle analytic toolkit'
+
+    version = Version(0, 1, 1)              # Class variables are SHARED by all instances and visible from the class
+
+    # The use of "self" is a cultural norm
+    # Parameter names are user visible, part of the API and should be spelled-out.
+    # Spelling-out avoids cultural bias for abbreviations.  Networking IS a common culture.
+    # When copying from one namespace to another, we generally keep the name the same.
+    def __init__(self, radius):
+        self.radius = radius                # Instances variables should be UNIQUE to each instance
+
+    def area(self):
+        'Perform quadrature on a planar shape of uniform revolution'
+        return math.pi * self.radius ** 2.0
+
+
+
diff --git a/client_code.py b/client_code.py
new file mode 100644
--- /dev/null
+++ b/client_code.py
@@ -0,0 +1,10 @@
+"Show-off circuitious from a user\'s point of view"
+
+from circuitous import Circle
+
+c = Circle(10)
+print u'Tutorial for Circuitous\N{trade mark sign}'
+print 'Using Circle version %d.%d' % Circle.version[:2]
+print 'A circle with a radius of', c.radius
+print 'has an area of', c.area()
+print

