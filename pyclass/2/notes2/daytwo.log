Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 
========== RESTART: /Users/raymond/Dropbox/Public/sj139/download.py ==========
============================== Source: http://dl.dropbox.com/u/3967849/sj139/links.txt ==============================
                                    Starting download at Tue Mar 29 09:40:23 2016                                    
200  OK               https://dl.dropbox.com/u/3967849/sj136/download.py      --> notes2/download.py        (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/mpl_demo.py     --> notes2/mpl_demo.py        (updated) 
200  OK               https://dl.dropbox.com/u/3967849/sj136/p_vs_np_1.py     --> notes2/p_vs_np_1.py       (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/lru_cache.py    --> notes2/lru_cache.py       (updated) 
200* OK               https://dl.dropbox.com/u/3967849/sj136/dayone.log       --> notes2/dayone.log         (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/__init__.py     --> notes2/__init__.py        (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/spelling.py     --> notes2/spelling.py        (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/pexpect.py      --> notes2/pexpect.py         (updated) 
200* OK               https://dl.dropbox.com/u/3967849/sj136/daytwo.log       --> notes2/daytwo.log         (updated) 
200* OK               https://dl.dropbox.com/u/3967849/sj136/dayfour.log      --> notes2/dayfour.log        (updated) 
200* OK               https://dl.dropbox.com/u/3967849/sj136/daythree.log     --> notes2/daythree.log       (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/PythonAwesome.pdf --> notes2/PythonAwesome.pdf  (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/IntermediatePython.pdf --> notes2/IntermediatePython.pdf (updated) 
200* OK               https://dl.dropbox.com/u/3967849/shared/common_passwords.txt --> notes2/common_passwords.txt (updated) 
200* OK               https://dl.dropbox.com/u/3967849/sj136/links.txt        --> notes2/links.txt          (updated) 
200* OK               https://dl.dropbox.com/u/3967849/shared/hamlet.txt      --> notes2/hamlet.txt         (updated) 
200  OK               https://dl.dropbox.com/u/3967849/shared/PythonTips.pdf  --> notes2/PythonTips.pdf     (updated) 
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
>>> pprint(names)
['tom',
 'david',
 'raymond',
 'rachel',
 'matthew',
 'susan',
 'timothy',
 'beatrice',
 'brandon',
 'martin',
 'darlene',
 'daily',
 'randal',
 'suzy',
 'bryce',
 'mary',
 'rodney',
 'davin',
 'bill',
 'dave']
>>> print people
['raymond', 'rachel', 'matthew']
>>> print foods
['steak', 'kale', 'chocolate']
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/tour_collections.py", line 17, in <module>
    c[color] += 1
KeyError: 'red'
>>> c
{}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
Counter({'red': 4, 'green': 3, 'blue': 2, 'purple': 1})
>>> 
>>> c['dragons']
0
>>> 
>>> 
>>> 
>>> del c['dragons']
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
Counter({'red': 4, 'green': 3, 'blue': 2, 'purple': 1})
>>> 
>>> c.keys()
['blue', 'purple', 'green', 'red']
>>> c.values()
[2, 1, 3, 4]
>>> c.items()
[('blue', 2), ('purple', 1), ('green', 3), ('red', 4)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3), ('blue', 2)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
>>> f
<closed file 'notes2/hamlet.txt', mode 'r' at 0x1041f7300>
>>> type(f)
<type 'file'>
>>> dir(f)
['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines']
>>> type(play)
<type 'str'>
>>> len(play)
202238
>>> # e t a o n i r s h
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
The
Tragedy
of
Hamlet,
Prince
of
Denmark
Shakespeare
homepage
|
Hamlet
|
Entire


Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/tour_collections.py", line 24, in <module>
    print word
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/idlelib/PyShell.py", line 1356, in write
    return self.shell.write(s, self.tags)
KeyboardInterrupt
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
the
tragedy
of
hamlet
prince
of
denmark
shakespeare
homepage
hamlet
entire
play
act
i
scene
i
elsinore
a
platform
before
the
castle
francisco
at
his
post
enter
to
him
bernardo
bernardo
who's
there
francisco
nay
answer
me
stand
and
unfold
yourself
bernardo
long
live
the
king
francisco
bernardo
bernardo
he
francisco
you
come
most
carefully
upon
your
hour
bernardo
'tis
now
struck
twelve
get
thee
to
bed
francisco
francisco
for
this
relief
much
thanks
'tis
bitter
cold
and
i
am
sick
at
heart
bernardo
have
you
had
quiet
guard
francisco
not
a
mouse
stirring
bernardo
well
good
night
if
you
do
meet
horatio
and
marcellus
the
rivals
of
my
watch
bid
them
make
haste
francisco
i
think
i
hear
them
stand
ho
who's
there
enter
horatio
and
marcellus
horatio
friends
to
this
ground
marcellus
and
liegemen
to
the
dane
francisco
give
=============================== RESTART: Shell ===============================
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435),
 ('it', 415),
 ('that', 388),
 ('is', 339),
 ('not', 312),
 ('lord', 308),
 ('his', 296),
 ('this', 294),
 ('but', 268),
 ('with', 267),
 ('for', 247),
 ('your', 242),
 ('me', 232),
 ('be', 226),
 ('as', 220),
 ('he', 215),
 ('what', 204),
 ('so', 196),
 ('him', 196),
 ('king', 194),
 ('have', 179),
 ('will', 169),
 ('horatio', 157),
 ('do', 151),
 ('no', 141),
 ('we', 139),
 ('are', 131),
 ('on', 126),
 ('all', 120),
 ('claudius', 120),
 ('our', 118),
 ('by', 117),
 ('queen', 116),
 ('polonius', 116),
 ('shall', 114),
 ('if', 112),
 ('or', 112),
 ('o', 110),
 ('good', 107),
 ('come', 106),
 ('they', 103)]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
>>> 
>>> 
>>> 
>>> # Strings are raw or cooked
>>> print 'Three\nblind\nmice\n'
Three
blind
mice

>>> print r'Three\nblind\nmice\n'
Three\nblind\nmice\n
>>> 
>>> 
>>> 
>>> s = '\bHello\b'
>>> s
'\x08Hello\x08'
>>> s = '\\bHello\\b'
>>> s
'\\bHello\\b'
>>> print s
\bHello\b
>>> 
>>> 
>>> re.findall('[a-z]', 're-invent')
['r', 'e', 'i', 'n', 'v', 'e', 'n', 't']
>>> re.findall('[a-z]+', 're-invent')
['re', 'invent']
>>> re.findall(r'[a\-z]+', 'abc-def-xyz-q')
['a', '-', '-', 'z-']
>>> 
>>> # Wesley
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
{'matthew': 'chocolate', 'rachel': 'kale', 'raymond': 'steak'}
>>> 
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> pref.keys()
['raymond', 'rachel', 'matthew']
>>> prev.values()

Traceback (most recent call last):
  File "<pyshell#43>", line 1, in <module>
    prev.values()
NameError: name 'prev' is not defined
>>> pref.values()
['steak', 'kale', 'chocolate']
>>> pref.items()
[('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')]
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
{'matthew': 'chocolate', 'rachel': 'kale', 'raymond': 'steak'}
>>> pref
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
{'matthew': 'chocolate', 'rachel': 'kale', 'raymond': 'steak'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
{'matthew': 'chocolate',
 'rachel': 'kale',
 'raymond': 'steak'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> 
>>> # The nature of truth.
>>> # All things start by being true.
>>> # Three false things:  1) None  2) obj==0   3)  len(obj)==0
>>> 
>>> bool('True')
True
>>> bool('False')
True
>>> len('False')
5
>>> bool([False, False])
True
>>> bool([False])
True
>>> bool([])
False
>>> 
>>> 
>>> bool(0j)
False
>>> 
>>> 
>>> int('42')
42
>>> type(_)
<type 'int'>
>>> 
>>> int()
0
>>> bool(int())
False
>>> float('3.14')
3.14
>>> type(_)
<type 'float'>
>>> float()
0.0
>>> bool(float())
False
>>> 
>>> 
>>> 
>>> str(42)
'42'
>>> str()
''
>>> bool(str())
False
>>> 
>>> 
>>> az = [int(), set(), dict(), list(), float(), str(), unicode()]
>>> az
[0, set([]), {}, [], 0.0, '', u'']
>>> map(bool, az)
[False, False, False, False, False, False, False]
>>> s = lambda : []
>>> s()
[]
>>> t = [s(), s(), s()]
>>> t
[[], [], []]
>>> map(id, t)
[4354566624, 4354567992, 4354589832]
>>> 
>>> t = [list(), list(), list()]
>>> t
[[], [], []]
>>> 
>>> 
>>> 
>>> # Grouping:     d[feature] = list_of_elements_with_that_feature
>>> 
>>> people = {}
>>> people['stark'] = []
>>> people['stark'].append('arya')
>>> people['lannister'] = []
>>> people['lannister'].append('geoffrey')
>>> people['stark'].append('john snow')
>>> people
{'lannister': ['geoffrey'], 'stark': ['arya', 'john snow']}
>>> list()
[]
>>> people = defaultdict(list)
>>> people['stark'].append('arya')
>>> people['lannister'].append('geoffrey')
>>> people['stark'].append('john snow')
>>> people
defaultdict(<type 'list'>, {'lannister': ['geoffrey'], 'stark': ['arya', 'john snow']})
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
>>> names
['tom', 'david', 'raymond', 'rachel', 'matthew', 'susan', 'timothy', 'beatrice', 'brandon', 'martin', 'darlene', 'daily', 'randal', 'suzy', 'bryce', 'mary', 'rodney', 'davin', 'bill', 'dave']
>>> name = 'beatrice'
>>> name[0]
'b'
>>> name[:1]
'b'
>>> 
>>> name = ''
>>> name[0]

Traceback (most recent call last):
  File "<pyshell#115>", line 1, in <module>
    name[0]
IndexError: string index out of range
>>> name[:1]
''
>>> 
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}
>>> name = 'beatrice'
>>> name[-1]
'e'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}
>>> name = 'beatrice'
>>> len(name)
8
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}
>>> name = 'beatrice'
>>> name.count('e')
2
>>> name.count('b')
1
>>> name.count('z')
0
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
>>> 
>>> 
>>> name
'dave'
>>> name.count('a')
1
>>> bm = name.count
>>> bm('a')
1
>>> map(lambda x: x**2, range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> 
>>> map(name.count, 'aeiouy')
[1, 1, 0, 0, 0, 0]
>>> sum(map(name.count, 'aeiouy'))
2
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
['tom', 'david', 'raymond', 'rachel', 'matthew']
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
tom gets on the ride
david gets on the ride
raymond gets on the ride
rachel gets on the ride
matthew gets on the ride
mary gets on the ride
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name
{'b': ['beatrice', 'brandon', 'bryce', 'bill'],
 'd': ['david', 'darlene', 'daily', 'davin', 'dave'],
 'm': ['matthew', 'martin', 'mary'],
 'r': ['raymond', 'rachel', 'randal', 'rodney'],
 's': ['susan', 'suzy'],
 't': ['tom', 'timothy']}

Group the names by the last letter of the name
{'d': ['david', 'raymond'],
 'e': ['beatrice', 'darlene', 'bryce', 'dave'],
 'l': ['rachel', 'randal', 'bill'],
 'm': ['tom'],
 'n': ['susan', 'brandon', 'martin', 'davin'],
 'w': ['matthew'],
 'y': ['timothy', 'daily', 'suzy', 'mary', 'rodney']}

Group the names by the length of the name
{3: ['tom'],
 4: ['suzy', 'mary', 'bill', 'dave'],
 5: ['david', 'susan', 'daily', 'bryce', 'davin'],
 6: ['rachel', 'martin', 'randal', 'rodney'],
 7: ['raymond', 'matthew', 'timothy', 'brandon', 'darlene'],
 8: ['beatrice']}

Group the names by the number of vowels:  aeiouy
{1: ['tom', 'bill'],
 2: ['david',
     'rachel',
     'matthew',
     'susan',
     'brandon',
     'martin',
     'randal',
     'suzy',
     'bryce',
     'mary',
     'davin',
     'dave'],
 3: ['raymond', 'timothy', 'darlene', 'daily', 'rodney'],
 4: ['beatrice']}
tom gets on the ride
david gets on the ride
raymond gets on the ride
rachel gets on the ride
matthew gets on the ride
mary gets on the ride
>>> d = deque('abcde')
>>> d.append('f')
>>> d
deque(['a', 'b', 'c', 'd', 'e', 'f'])
>>> d.pop()
'f'
>>> d
deque(['a', 'b', 'c', 'd', 'e'])
>>> d.appendleft('z')
>>> d
deque(['z', 'a', 'b', 'c', 'd', 'e'])
>>> d.popleft()
'z'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/tour_collections.py ======
[('red', 4), ('green', 3)]
[(' ', 43519),
 ('e', 15858),
 ('t', 12455),
 ('o', 11453),
 ('a', 10259),
 ('i', 8907),
 ('s', 8670),
 ('h', 8644),
 ('n', 8581),
 ('r', 8105)]
[('the', 1137),
 ('and', 963),
 ('to', 736),
 ('of', 669),
 ('you', 547),
 ('i', 540),
 ('a', 527),
 ('my', 513),
 ('hamlet', 461),
 ('in', 435)]
OrderedDict([('raymond', 'steak'), ('rachel', 'kale'), ('matthew', 'chocolate')])
Group the names by the first letter of the name

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/tour_collections.py", line 43, in <module>
    d = defaultdict(list)
NameError: name 'defaultdict' is not defined
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
>>> """hello"""
'hello'
>>> "Don't you forget about me"
"Don't you forget about me"
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous(tm)
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> d = Circle(12)
>>> 
>>> c.version
0.1
>>> d.version
0.1
>>> Circle.version

Traceback (most recent call last):
  File "<pyshell#155>", line 1, in <module>
    Circle.version
AttributeError: type object 'Circle' has no attribute 'version'
>>> 
>>> c.__dict__
{'version': 0.1, 'radius': 10}
>>> d.__dict__
{'version': 0.1, 'radius': 12}
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> d = Circle(12)
>>> Circle.version
0.1
>>> c.version
0.1
>>> d.version
0.1
>>> c.__dict__
{'radius': 10}
>>> d.__dict__
{'radius': 12}
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
>>> 
>>> # Kronecker:  God created the integers, all the rest is the work of man
>>> 
>>> 11 + 22 == 33
True
>>> type(11)
<type 'int'>
>>> type(1.1)
<type 'float'>
>>> 1.1 + 2.2 == 3.3
False
>>> s = 1.1 + 2.2
>>> t = 3.3
>>> s
3.3000000000000003
>>> t
3.3
>>> # 1ULP
>>> [None] * 10
[None, None, None, None, None, None, None, None, None, None]
>>> [0.1] * 10
[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
>>> sum([0.1] * 10) == 1.0
False
>>> sum([0.1] * 10)
0.9999999999999999
>>> assert sum([0.1] * 10) >= 1.0

Traceback (most recent call last):
  File "<pyshell#183>", line 1, in <module>
    assert sum([0.1] * 10) >= 1.0
AssertionError
>>> 
>>> names = 'raymond rachel matthew'.split()
>>> from pprint
SyntaxError: invalid syntax
>>> from pprint import pprint
>>> pprint(names, width=15)
['raymond',
 'rachel',
 'matthew']
>>> pprint(sorted(names), width=15)
['matthew',
 'rachel',
 'raymond']
>>> pprint(sorted([
	(10, 500, 2),
	(5, 1000, 2000),
	(10, 200, 9999999),
	(5, 18, 999999999),
	(7, 0, 2),
]), width =25)
[(5, 18, 999999999),
 (5, 1000, 2000),
 (7, 0, 2),
 (10, 200, 9999999),
 (10, 500, 2)]
>>> todo = [
	(50, 'python'),
	(0, 'wake up'),
	(100, 'goto sleep'),
	(30, 'fed son'),
]
>>> pprint(sorted(todo), width=25)
[(0, 'wake up'),
 (30, 'fed son'),
 (50, 'python'),
 (100, 'goto sleep')]
>>> pprint(sorted(todo))
[(0, 'wake up'), (30, 'fed son'), (50, 'python'), (100, 'goto sleep')]
>>> 0.1.1
SyntaxError: invalid syntax
>>> 
>>> 
>>> 
>>> 
>>> target = '2.7.6'
>>> 
>>> version = '2.7.8'
>>> version >= target
True
>>> version = '2.7.9'
>>> version >= target
True
>>> version = '2.7.10'
>>> version >= target
False
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> target = (2, 7, 6)
>>> current = (2, 7, 9)
>>> current >= target
True
>>> current = (2, 7, 11)
>>> current >= target
True
>>> 
>>> 
>>> 
>>> p = 170, 0.6, 0.4
>>> type(p)
<type 'tuple'>
>>> ()
()
>>> p = 170, 0.6, 0.4,
>>> p = (
	170,
	0.6,
	0.4,
)
>>> t = 10,
>>> len(t)
1
>>> # Parens are optional on tuples except for the 0-tuple:  ()
>>> # Trailing commas are option on tuples except for the 1-tuple:   (10,)
>>> p = 170, 0.6, 0.4
>>> len(p)
3
>>> p[0]
170
>>> p[-1]
0.4
>>> p[:2]
(170, 0.6)
>>> a, b, c = p
>>> # Problem:  The tuple is not self-documenting
>>> if p[1] >= 0.5:
	print 'Whew, that is bright!'

	
Whew, that is bright!
>>> if p[2] >= 0.5:
	print 'Whew, that is light!'

	
>>> # Problem:  Tuple indexing doesn't reveal much information either
>>> from collections import namedtuple
>>> # Factory function for creating NEW tuple subclasses
>>> Color = namedtuple('Color', ['hue', 'saturation', 'luminosity'])
>>> issubclass(Color, tuple)
True
>>> p = Color(170, 0.6, 0.4)
>>> isinstance(p, Color)
True
>>> isinstance(p, tuple)
True
>>> len(p)
3
>>> a, b, c = p
>>> p[0]
170
>>> p[:2]
(170, 0.6)
>>> p
Color(hue=170, saturation=0.6, luminosity=0.4)
>>> p[0]
170
>>> p.hue
170
>>> if p.saturation >= 0.5:
	print 'Whew, that is bright!'

	
Whew, that is bright!
>>> if p.luminosity >= 0.5:
	print 'Whew, that is light!'

	
>>> x = 10
>>> x = 12
>>> x
12
>>> class Color:
	'does something else'

	
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle.version
Version(major=0, minor=1, micro=1)
>>> Circle.version.minor
1
>>> Circle.version[1]
1
>>> Circle.version.minor == (0, 1, 1)
False
>>> Circle.version == (0, 1, 1)
True
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version Version(major=0, minor=1, micro=1)
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/client_code.py", line 7, in <module>
    print 'Using Circle version %d.%d' % Circle.version
TypeError: not all arguments converted during string formatting
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
>>> Version(major=0, minor=1, micro=1)

Traceback (most recent call last):
  File "<pyshell#282>", line 1, in <module>
    Version(major=0, minor=1, micro=1)
NameError: name 'Version' is not defined
>>> 
>>> 
>>> import sys
>>> sys.version
'2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) \n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]'
>>> print _
2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)]
>>> tuple(sys.version_info)
(2, 7, 11, 'final', 0)
>>> sys.version_info
sys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)
>>> sys.version_info.micro
11
>>> 
>>> 
>>> import time
>>> tuple(time.localtime())
(2016, 3, 29, 12, 24, 14, 1, 89, 1)
>>> time.localtime()
time.struct_time(tm_year=2016, tm_mon=3, tm_mday=29, tm_hour=12, tm_min=24, tm_sec=58, tm_wday=1, tm_yday=89, tm_isdst=1)
>>> 
>>> 
>>> 
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

>>> class Person(tuple):
	def __new__(cls, name, age, gender):
		return tuple.__new__(cls, (name, age, gender))
	@property
	def name(self):
		retun self[0]
		
SyntaxError: invalid syntax
>>> class Person(tuple):
	def __new__(cls, name, age, gender):
		return tuple.__new__(cls, (name, age, gender))
	@property
	def name(self):
		return self[0]
	@property
	def age(self):
		return self[1]
	@property
	def gender(self):
		return self[2]
	def __repr__(self):
		return '%s(name=%r, age=%r, gender=%r)' % (self.__class__.__name__,
							   self.name, self.age, self.gender)

	
>>> p = Person('Rachel Hettinger', 46, 'Female')
>>> p
Person(name='Rachel Hettinger', age=46, gender='Female')
>>> a, b, c = p
>>> p[:2]
('Rachel Hettinger', 46)
>>> p.gender
'Female'
>>> p.name
'Rachel Hettinger'
>>> p[0]
'Rachel Hettinger'
>>> from collections import namedtuple
>>> Person = namedtuple('Person', ['name', 'age', 'gender'])
>>> p = Person('Rachel Hettinger', 46, 'Female')
>>> p
Person(name='Rachel Hettinger', age=46, gender='Female')
>>> p.gender
'Female'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
>>> 
>>> from random import *
>>> random()                        # 0.0 <= x < 1.0
0.36713147188074147
>>> seed(8675309)
>>> random()
0.40224696110279223
>>> random()
0.5102471779215914
>>> random() * 100.0
66.37431122665531
>>> random() * 100.0                # 0.0 <= x < 100.0
86.07166923395508
>>> int(3.14)
3
>>> # Floating point number:   signed integer and a signed fractional component
>>> #                               int                  frac
>>> int(-3.14)
-3
>>> x = -3.14
>>> x - int(x)
-0.14000000000000012
>>> 
>>> 
>>> # -int(x) == int(-x)        Odd functions    are symmetric about the origin
>>> 
>>> from math import *
>>> type(int(3.14))
<type 'int'>
>>> 
>>> ceil(3.14)
4.0
>>> type(_)
<type 'float'>
>>> ceil(-3.14)
-3.0
>>> floor(3.14)
3.0
>>> floor(-3.14)
-4.0
>>> type(_)
<type 'float'>
>>> # ceil/floor -> float and they are assymetric about the origin
>>> 
>>> round(3.9)
4.0
>>> type(_)
<type 'float'>
>>> round(3.1)
3.0
>>> round(-3.9)
-4.0
>>> round(-3.1)
-3.0
>>> # -round(x) == round(-x)        Odd functions    are symmetric about the origin
>>> 
>>> 
>>> # ceil/floor -> float and they are assymetric about the origin
>>> # int        -> int and is symmetric
>>> # round      -> float and is symmetric
>>> 
>>> round(3.5)
4.0
>>> round(4.5)
5.0
>>> round(-3.5)
-4.0
>>> round(-4.5)
-5.0
>>> # Python 2:  rounding rule:   ROUND-HALF-AWAY-FROM-ZERO
>>> # Python 3:  rounding rule:   ROUND-HALF-EVEN (banker's rounding)
>>> 
>>> # Python 2:  ceil/floor/round -> float
>>> # Python 3:  int/ceil/floor/round -> int
>>> 
>>> 
>>> int(random() * 100.0)              # 0 <= x < 100
28
>>> # Chunking
>>> 
>>> # Take any idiomatic pattern and simplify it by giving it a name.
>>> # API Design Principle:  Build off of what your user's already know.
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10)
[2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10, 3)
[2, 5, 8]
>>> range(100)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>>> randrange(100)
64
>>> range(1000, 2000, 100)
[1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900]
>>> randrange(1000, 2000, 100)
1600
>>> uniform(1000, 2000)
1227.155697662952
>>> triangular(1000, 2000)
1620.3271144126954
>>> triangular(1000, 2000)
1213.488020551472
>>> triangular(1000, 2000)
1078.992200284363
>>> triangular(1000, 2000)
1774.2233215442407
>>> triangular(1000, 2000)
1581.0930139717866
>>> [round(normalvariate(100, 15)) for i in range(20)]
[95.0, 82.0, 116.0, 112.0, 113.0, 128.0, 104.0, 97.0, 91.0, 106.0, 111.0, 99.0, 84.0, 90.0, 89.0, 108.0, 68.0, 94.0, 94.0, 103.0]
>>> [int(round(normalvariate(100, 15))) for i in range(20)]
[107, 65, 127, 97, 105, 112, 95, 118, 68, 101, 90, 95, 85, 125, 104, 69, 95, 87, 101, 93]
>>> iqs = [int(round(normalvariate(100, 15))) for i in range(20)]
>>> sum(iqs) / len(iqs)
98
>>> 
>>> [int(round(normalvariate(100, 15))) for i in range(1000)]
[92, 82, 65, 107, 141, 116, 89, 96, 118, 84, 79, 125, 77, 107, 118, 81, 96, 106, 97, 86, 83, 96, 68, 94, 107, 85, 109, 93, 106, 81, 93, 123, 66, 104, 92, 125, 104, 85, 92, 113, 103, 96, 99, 110, 102, 128, 94, 87, 105, 128, 104, 105, 57, 124, 102, 92, 97, 72, 107, 85, 78, 84, 102, 93, 91, 110, 89, 90, 85, 104, 81, 113, 100, 94, 119, 88, 113, 94, 87, 90, 105, 111, 123, 104, 116, 72, 103, 118, 95, 88, 85, 88, 82, 99, 106, 97, 101, 102, 112, 109, 121, 86, 90, 97, 66, 106, 90, 115, 87, 81, 112, 79, 88, 98, 88, 84, 100, 121, 94, 90, 86, 90, 118, 92, 69, 108, 109, 79, 139, 85, 103, 106, 131, 82, 86, 103, 121, 114, 103, 80, 109, 120, 84, 93, 112, 100, 112, 93, 109, 125, 97, 106, 109, 98, 128, 104, 93, 110, 97, 105, 100, 117, 109, 99, 97, 114, 120, 96, 76, 89, 140, 72, 88, 78, 71, 111, 87, 94, 84, 77, 96, 94, 68, 111, 97, 84, 75, 93, 102, 88, 100, 87, 105, 95, 124, 71, 108, 102, 91, 64, 106, 91, 104, 71, 124, 102, 95, 105, 101, 97, 66, 118, 108, 111, 98, 105, 95, 87, 105, 97, 84, 67, 95, 75, 113, 92, 125, 93, 118, 109, 90, 118, 117, 116, 98, 93, 104, 104, 121, 81, 72, 105, 101, 118, 90, 120, 127, 101, 98, 108, 93, 87, 56, 84, 83, 128, 104, 100, 120, 127, 108, 98, 93, 98, 113, 105, 84, 77, 115, 83, 78, 106, 119, 109, 106, 119, 88, 120, 120, 86, 96, 96, 102, 75, 102, 109, 86, 99, 86, 121, 92, 92, 94, 121, 107, 106, 110, 111, 102, 97, 88, 106, 92, 95, 92, 84, 83, 93, 117, 102, 77, 89, 90, 61, 96, 140, 100, 106, 115, 106, 97, 91, 82, 104, 119, 112, 81, 84, 120, 106, 93, 117, 98, 103, 79, 75, 100, 123, 110, 96, 118, 114, 84, 54, 80, 88, 122, 117, 70, 138, 130, 87, 83, 86, 97, 104, 99, 88, 105, 94, 132, 81, 78, 106, 86, 112, 97, 102, 73, 85, 73, 94, 69, 100, 104, 111, 81, 101, 96, 104, 80, 91, 104, 78, 110, 102, 108, 91, 89, 117, 81, 105, 97, 104, 81, 121, 73, 99, 105, 87, 127, 104, 79, 96, 112, 117, 109, 103, 113, 88, 61, 116, 85, 95, 110, 91, 110, 105, 50, 78, 93, 111, 86, 80, 87, 118, 106, 115, 97, 97, 84, 111, 92, 121, 81, 101, 89, 86, 94, 102, 92, 124, 99, 108, 76, 111, 77, 131, 114, 89, 86, 94, 90, 108, 96, 111, 101, 78, 117, 116, 112, 82, 91, 113, 85, 105, 108, 115, 130, 111, 114, 95, 111, 95, 98, 94, 82, 85, 95, 90, 94, 116, 102, 114, 104, 92, 108, 109, 81, 98, 94, 102, 95, 117, 94, 101, 107, 113, 93, 107, 111, 98, 111, 106, 103, 88, 96, 102, 116, 131, 97, 103, 117, 74, 74, 92, 101, 108, 100, 106, 81, 125, 76, 92, 95, 92, 75, 117, 118, 107, 90, 128, 82, 74, 85, 102, 85, 107, 118, 100, 106, 106, 112, 112, 61, 101, 89, 92, 109, 90, 106, 109, 102, 122, 102, 101, 97, 116, 101, 108, 92, 89, 79, 117, 96, 104, 106, 93, 76, 118, 75, 122, 116, 108, 89, 102, 119, 82, 91, 98, 79, 106, 124, 114, 119, 133, 80, 119, 74, 111, 118, 112, 90, 107, 87, 97, 107, 100, 92, 84, 82, 102, 85, 100, 112, 121, 129, 117, 106, 100, 128, 94, 91, 94, 86, 109, 89, 96, 84, 81, 70, 102, 106, 99, 124, 79, 99, 101, 72, 113, 101, 62, 90, 110, 82, 106, 104, 118, 95, 123, 88, 89, 95, 82, 85, 104, 113, 88, 82, 86, 84, 129, 75, 98, 127, 84, 82, 101, 120, 124, 114, 113, 88, 123, 101, 105, 111, 64, 100, 89, 100, 95, 116, 108, 85, 96, 87, 115, 113, 99, 101, 80, 109, 92, 88, 95, 121, 103, 93, 112, 103, 71, 121, 107, 119, 113, 94, 110, 88, 79, 83, 103, 106, 94, 95, 107, 67, 94, 93, 104, 114, 112, 108, 95, 108, 98, 98, 104, 103, 91, 78, 87, 85, 69, 105, 116, 104, 107, 104, 104, 97, 87, 93, 117, 91, 83, 139, 131, 111, 93, 108, 99, 97, 86, 109, 111, 104, 99, 113, 80, 91, 75, 120, 107, 104, 126, 92, 113, 104, 82, 134, 90, 106, 89, 98, 93, 94, 86, 88, 106, 136, 88, 100, 109, 106, 127, 96, 90, 95, 72, 90, 89, 72, 112, 114, 101, 97, 85, 100, 110, 123, 79, 84, 89, 107, 118, 112, 76, 116, 104, 89, 129, 98, 121, 80, 96, 82, 133, 136, 112, 109, 133, 105, 108, 113, 89, 104, 72, 118, 72, 107, 112, 94, 100, 88, 98, 100, 77, 89, 122, 92, 84, 104, 94, 104, 90, 113, 119, 104, 117, 112, 93, 87, 117, 105, 110, 102, 99, 92, 123, 104, 105, 100, 90, 107, 105, 98, 91, 109, 103, 136, 112, 110, 95, 108, 72, 107, 109, 80, 110, 105, 110, 63, 120, 80, 78, 107, 86, 95, 113, 111, 83, 95, 108, 96, 96, 94, 110, 111, 88, 114, 88, 115, 132, 96, 117, 90, 136, 98, 113, 101, 100, 103, 101, 109, 96, 106, 95, 102, 103, 99, 119, 121, 101, 85, 88, 91, 116, 116, 103, 92, 105, 104, 64, 103, 87, 111, 82, 83, 99, 112, 71, 93, 99, 106, 107, 106, 85, 108, 68, 82, 109, 102, 103, 111, 89, 88, 88, 119, 88, 79, 90, 106, 97, 95, 120, 118, 104, 88, 95, 100, 67, 93, 115, 96, 103, 77, 91, 101, 122, 110, 111, 99, 70, 84, 101, 104, 94, 110, 83, 117, 100, 94, 86, 120, 87, 85, 108, 89, 92, 97, 112, 88, 116, 109, 113, 89, 95, 106, 112]
>>> iqs = [int(round(normalvariate(100, 15))) for i in range(1000)]
>>> sum(iqs) / float(len(iqs))
100.059
>>> min(iqs)
55
>>> max(iqs)
155
>>> 
>>> 
>>> 
﻿Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> 
>>> from random import *
>>> expovariate(5)
0.13840265408090743
>>> expovariate(5)
0.19820495699223142
>>> expovariate(5)
0.08742451247406731
>>> expovariate(5)
0.313798102818146
>>> expovariate(5)
0.015931085995665884
>>> expovariate(5)
0.024980476305445594
>>> expovariate(5)
0.2156962469353542
>>> outcomes = 'win lose draw'.split()
>>> len(outcomes)
3
>>> outcomes[0]
'win'
>>> outcomes[1]
'lose'
>>> outcomes[2]
'draw'
>>> range(3)
[0, 1, 2]
>>> 
>>> 
>>> outcomes = 'win lose draw'.split()
>>> 
>>> 
>>> 
>>> 
>>> from random import *
>>> outcomes = 'win lose draw'.split()
>>> outcomes[int(random() * len(outcomes))]
'lose'
>>> outcomes[int(random() * len(outcomes))]
'win'
>>> outcomes[randrange(len(outcomes))]
'win'
>>> choice(outcomes)
'draw'
>>> 
>>> 
>>> results = [choice(outcomes) for i in range(10)]
>>> results
['draw', 'win', 'draw', 'lose', 'draw', 'lose', 'lose', 'draw', 'lose', 'lose']
>>> results.count('win')
1
>>> results.count('draw')
4
>>> results.count('lose')
5
>>> len(results)
10
>>> 
>>> 
>>> # ^--- Sampling WITH replacement
>>> 
>>> sample(outcomes, 2)
['draw', 'win']
>>> # ^--- Sampling WITHOUT replacement
>>> sample(outcomes, 1)
['lose']
>>> sample(outcomes, 1)[0]
'win'
>>> 
>>> 
>>> from random import *
>>> outcomes = 'win lose draw'.split()
>>> sample(outcomes, 10)

Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    sample(outcomes, 10)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.py", line 323, in sample
    raise ValueError("sample larger than population")
ValueError: sample larger than population
>>> 
>>> 
>>> 
>>> 
>>> sample(outcomes, 1)[0]
'draw'
>>> choice(outcomes)
'draw'
>>> sample(outcomes, len(outcomes))
['draw', 'win', 'lose']
>>> shuffle(outcomes)
>>> outcomes
['draw', 'win', 'lose']
>>> 
>>> 
>>> # choice == sample(p, 1)[0]  <-->  sample(p, k)   <-->  shuffle == sample(p, len(p))
>>> 
>>> 
>>> data = [randrange(100) for i in range(100)]
>>> 
>>> 
>>> data = [randrange(100) for i in range(50)]
>>> min(data)
4
>>> max(data)
98
>>> sorted(data)[:3]
[4, 6, 6]
>>> sorted(data)[0]
4
>>> sorted(data)[-1]
98
>>> from heapq import nsmallest, nlargest
>>> 
>>> nsmallest(3, data)
[4, 6, 6]
>>> sorted(data, reverse=True)[:3]
[98, 92, 90]
>>> nlargest(3, data)
[98, 92, 90]
>>> 
>>> # min == sorted(d)[0]   nsmallest==sorted(d)[:k]    nlargest==sorted(d, rev=True)[:k]
>>> #                                                          max = sorted[-1]
>>> 
>>> 
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[<circuitous.Circle object at 0x103a39ed0>, <circuitous.Circle object at 0x103a4a4d0>, <circuitous.Circle object at 0x103a4a490>, <circuitous.Circle object at 0x103a4a510>, <circuitous.Circle object at 0x103a4a590>, <circuitous.Circle object at 0x103a4a5d0>, <circuitous.Circle object at 0x103a4a610>, <circuitous.Circle object at 0x103a4a690>, <circuitous.Circle object at 0x103a4a650>, <circuitous.Circle object at 0x103a4a710>]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[<circuitous.Circle object at 0x10393ae10>, <circuitous.Circle object at 0x10393aed0>, <circuitous.Circle object at 0x1039494d0>, <circuitous.Circle object at 0x103949490>, <circuitous.Circle object at 0x103949510>, <circuitous.Circle object at 0x103949590>, <circuitous.Circle object at 0x1039495d0>, <circuitous.Circle object at 0x103949610>, <circuitous.Circle object at 0x103949690>, <circuitous.Circle object at 0x103949650>]
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> xrange(10)
xrange(10)
>>> it = iter(xrange(10))
>>> next(it)
0
>>> next(it)
1
>>> next(it)
2
>>> next(it)
3
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[<circuitous.Circle object at 0x104363e10>, <circuitous.Circle object at 0x104363ed0>, <circuitous.Circle object at 0x1043724d0>, <circuitous.Circle object at 0x104372490>, <circuitous.Circle object at 0x104372510>, <circuitous.Circle object at 0x104372590>, <circuitous.Circle object at 0x1043725d0>, <circuitous.Circle object at 0x104372610>, <circuitous.Circle object at 0x104372690>, <circuitous.Circle object at 0x104372650>]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[<circuitous.Circle object at 0x103a49850>,
 <circuitous.Circle object at 0x103a49890>,
 <circuitous.Circle object at 0x103a498d0>,
 <circuitous.Circle object at 0x103a49950>,
 <circuitous.Circle object at 0x103a49990>,
 <circuitous.Circle object at 0x103a49a10>,
 <circuitous.Circle object at 0x103a499d0>,
 <circuitous.Circle object at 0x103a49a50>,
 <circuitous.Circle object at 0x103a49ad0>,
 <circuitous.Circle object at 0x103a49b10>]
>>> s = '''hello'''
>>> s
'hello'
>>> # __repr__   pronounced "repper" and is short for "representation"
>>> print s
hello
>>> # __str__    pronounce "stir" and is short for "string"
>>> 
>>> 
>>> 
>>> print 30 + 40
70
>>> print '7' + '0'
70
>>> 
>>> 30 + 40
70
>>> '7' + '0'
'70'
>>> 
>>> (30 + 40) * 5
350
>>> ('7' + '0') * 5
'7070707070'
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle(10)
Circle(10.000000)
>>> type(Circle(10).radius)
<type 'int'>
>>> 
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle(10)
Circle(10)
>>> Circle(10.0)
Circle(10.0)
>>> Circle(math.pi)
Circle(3.14159265359)
>>> math.pi
3.141592653589793
>>> print math.pi
3.14159265359
>>> math.pi
3.141592653589793
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle(math.pi)
Circle(3.141592653589793)
>>> math.pi
3.141592653589793
>>> 3.141592653589793 == math.pi
True
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[Circle(0.40224696110279223),
 Circle(0.5102471779215914),
 Circle(0.6637431122665531),
 Circle(0.8607166923395507),
 Circle(0.28094269977126785),
 Circle(0.6413941220751519),
 Circle(0.6472135534646176),
 Circle(0.22715569766295207),
 Circle(0.711696999899619),
 Circle(0.09115426983797148)]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[0.5083179151495382,
 0.8179205041298087,
 1.384044097288627,
 2.327396215536275,
 0.24796213997951547,
 1.2924085543325607,
 1.3159672444054562,
 0.16210527294445717,
 1.591256324893598,
 0.02610381037583005]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
[0.5083179151495382,
 0.8179205041298087,
 1.384044097288627,
 2.327396215536275,
 0.24796213997951547,
 1.2924085543325607,
 1.3159672444054562,
 0.16210527294445717,
 1.591256324893598,
 0.02610381037583005]
>>> sum(areas)
9.673482079035665
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 0.967348207904
>>> averagearea

Traceback (most recent call last):
  File "<pyshell#119>", line 1, in <module>
    averagearea
NameError: name 'averagearea' is not defined
>>> averageArea = 1.12
>>> 
>>> 
>>> 32 / 5
6
>>> 
>>> def average(seq):
	return sum(seq) / len(seq)

>>> average([10, 20, 60])
30
>>> average([10, 20, 61])
30
>>> from __future__ import division
>>> def average(seq):
	return sum(seq) / len(seq)

>>> 32 / 5
6.4
>>> average([10, 20, 61])
30.333333333333332
>>> 
=============================== RESTART: Shell ===============================
>>> 32 / 5
6
>>> from __future__ import print_function
>>> print 'hello world'
SyntaxError: invalid syntax
>>> print('hello world')
hello world
>>> # 2-to-3.py
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 0.967348207904
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.1
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.1
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
>>> print circle
Circle(0.09115426983797148)
>>> print circles
[Circle(0.1), Circle(0.2), Circle(0.7)]
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #0
Circle #1
Circle #2
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
Circle #2
Circle #3
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of
Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of
Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.2
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.2
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.3
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.3
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.3
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.3
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

>>> 
﻿Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> c.angle_to_grade(5)

Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    c.angle_to_grade(5)
TypeError: angle_to_grade() takes exactly 1 argument (2 given)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> c.angle_to_grade(5)
8.7488663525924
>>> 
>>> 
>>> Circle(10).angle_to_grade(5)
8.7488663525924
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle.angle_to_grade(5)

Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    Circle.angle_to_grade(5)
TypeError: angle_to_grade() takes exactly 2 arguments (1 given)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle.angle_to_grade(5)

Traceback (most recent call last):
  File "<pyshell#9>", line 1, in <module>
    Circle.angle_to_grade(5)
TypeError: angle_to_grade() takes exactly 2 arguments (1 given)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle.angle_to_grade(5)
8.7488663525924
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5 degrees
is a 8.7488663525924 percent grade
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5 degrees
is a 8.7488663525924 percent grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5°
is a 8.7488663525924 percent grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5°
is a 8.7488663525924 percent grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5°
is a 8.7 percent grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5°

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/client_code.py", line 75, in <module>
    print 'is a %.1f% grade' % Circle.angle_to_grade(5)
TypeError: not enough arguments for format string
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5°
is a 8.7% grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.5
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.5
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

>>> 
>>> 
>>> def print_func(obj):
	s = obj.__str__()
	sys.stdout.write(s)
	sys.stdout.write('\n')

	
>>> import sys
>>> print_func(30 + 40)
70
>>> sys.stderr.write('Oops, I did it again\n')
Oops, I did it again
>>> print >> sys.stderr, 'I played with your heart'
I played with your heart
>>> 
>>> 
>>> 
>>> dict.fromkeys('raymond rachel matthew'.split(), 'unknown')
{'matthew': 'unknown', 'rachel': 'unknown', 'raymond': 'unknown'}
>>> dict.fromkeys('raymond rachel matthew'.split(), 0)
{'matthew': 0, 'rachel': 0, 'raymond': 0}
>>> 
>>> 
>>> from datetime import *
>>> date(1986, 2, 15)
datetime.date(1986, 2, 15)
>>> import time
>>> ts = time.time() - 3600 * 48
>>> ts
1459125056.46517
>>> date.fromtimestamp(ts)
datetime.date(2016, 3, 27)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle.from_bbd(Circle(10), 40)
>>> c
Circle(14.14213562373095)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> Circle.from_bbd(40)
Circle(14.14213562373095)
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.6
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> Circle.from_bbd(40)
Circle(14.14213562373095)
>>> Tire.from_bbd(40)
Circle(14.14213562373095)
>>> 
>>> 
>>> cls = Circle
>>> cls.__name__
'Circle'
>>> cls(10)
Circle(10)
>>> cls = Tire
>>> cls.__name__
'Tire'
>>> cls(10)
Tire(10)
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.6
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.


Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/client_code.py", line 80, in <module>
    c = Circle.from_bbd(25)
TypeError: from_bbd() takes exactly 2 arguments (1 given)
>>> 
>>> 
>>> 
>>> Circle.from_bbd(Circle, 10)
Circle(3.5355339059327373)
>>> Tire.from_bbd(Tire, 10)
Tire(3.5355339059327373)
>>> 
>>> 
>>> # c.area()            ->  Circle.area(c)               c.area(c)
>>> #                                                      Circle.from_bbd(Circle, 10)
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.6
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.6
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> Tire.from_bbd(20)
Tire(7.071067811865475)
>>> MonsterTire.from_bbd(20)
MonsterTire(7.071067811865475)
>>> Circle.from_bbd(20)
Circle(7.071067811865475)
>>> 
