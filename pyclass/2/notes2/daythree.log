Python 2.7.11 (v2.7.11:6d1b6a68f775, Dec  5 2015, 12:54:16) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> c.area()
314.1592653589793
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 4417.86466911
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> # a.x -> inst -> cls -> base -> AttributeError
>>> t.__dict__
{'radius': 30}
>>> t.radius
30
>>> t.perimeter()
235.61944901923448
>>> t.__class__
<class '__main__.Tire'>
>>> t.__class__.__dict__
dict_proxy({'perimeter': <function perimeter at 0x104180578>, 'RUBBER_RATIO': 1.25, '__module__': '__main__', '__doc__': 'Circle analytics specialed for tires'})
>>> from pprint import pprint
>>> pprint(dict(t.__class__.__dict__))
{'RUBBER_RATIO': 1.25,
 '__doc__': 'Circle analytics specialed for tires',
 '__module__': '__main__',
 'perimeter': <function perimeter at 0x104180578>}
>>> 
>>> t.area()
4417.864669110647
>>> t.__class__.__bases__
(<class 'circuitous.Circle'>,)
>>> t.__class__.__bases__[0]
<class 'circuitous.Circle'>
>>> t.__class__.__bases__[0].__dict__
dict_proxy({'perimeter': <function perimeter at 0x104168aa0>, '__module__': 'circuitous', 'area': <function area at 0x104168a28>, 'angle_to_grade': <staticmethod object at 0x1040e7e50>, 'from_bbd': <classmethod object at 0x1040e7e88>, 'version': Version(major=0, minor=8, micro=1), '__repr__': <function __repr__ at 0x104168b18>, '__dict__': <attribute '__dict__' of 'Circle' objects>, '__weakref__': <attribute '__weakref__' of 'Circle' objects>, '__doc__': 'Advanced circle analytic toolkit', '__init__': <function __init__ at 0x1041689b0>})
>>> pprint(dict(t.__class__.__bases__[0].__dict__))
{'__dict__': <attribute '__dict__' of 'Circle' objects>,
 '__doc__': 'Advanced circle analytic toolkit',
 '__init__': <function __init__ at 0x1041689b0>,
 '__module__': 'circuitous',
 '__repr__': <function __repr__ at 0x104168b18>,
 '__weakref__': <attribute '__weakref__' of 'Circle' objects>,
 'angle_to_grade': <staticmethod object at 0x1040e7e50>,
 'area': <function area at 0x104168a28>,
 'from_bbd': <classmethod object at 0x1040e7e88>,
 'perimeter': <function perimeter at 0x104168aa0>,
 'version': Version(major=0, minor=8, micro=1)}
>>> 
>>> 
>>> 
>>> x = 10
>>> print x**2
100
>>> 
>>> 
>>> x = 10
>>> 
>>> x = 12
>>> print x**3
1728
>>> 
>>> print x**2
144
>>> 
>>> x = 10
>>> _x = x
>>> 
>>> x = 12
>>> print x ** 3
1728
>>> 
>>> print _x ** 2
100
>>> 
>>> 
>>> def f(x):
	return x**2

>>> y = f(10)
>>> y
100
>>> 
>>> 
>>> def f(x):
	return x**3

>>> f(12)
1728
>>> 
>>> f(10)
1000
>>> 
>>> 
>>> def f(x):
	return x**2

>>> _f = f
>>> 
>>> def f(x):
	return x**3

>>> f(12)
1728
>>> _f(10)
100
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> 
=============================== RESTART: Shell ===============================
>>> x = 10
>>> _x = x
>>> 
>>> x
10
>>> _x
10
>>> 
=============================== RESTART: Shell ===============================
>>> _x = x

Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    _x = x
NameError: name 'x' is not defined
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/circuitous.py", line 27, in <module>
    class Circle(object):
  File "/Users/raymond/Dropbox/Public/sj139/circuitous.py", line 45, in Circle
    _perimeter = perimeter
NameError: name 'perimeter' is not defined
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 4417.86466911
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/client_code.py", line 10, in <module>
    print 'has an area of', c.area()
  File "/Users/raymond/Dropbox/Public/sj139/circuitous.py", line 41, in area
    p = self._perimeter()               # Class local reference, because sometimes you need "self" to really be you
AttributeError: 'Circle' object has no attribute '_perimeter'
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> dir(tire)

Traceback (most recent call last):
  File "<pyshell#68>", line 1, in <module>
    dir(tire)
NameError: name 'tire' is not defined
>>> dir(t)
['RUBBER_RATIO', '_Circle_perimeter', '_Tire_perimeter', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'angle_to_grade', 'area', 'from_bbd', 'perimeter', 'radius', 'version']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> dict()
{}
>>> dict(x=1, y=2)
{'y': 2, 'x': 1}
>>> dict([('abc', 2), ('def', 3)])
{'abc': 2, 'def': 3}
>>> dict({'x': 1})
{'x': 1}
>>> 
>>> # dict()   dict(d)   dict(lot)     dict(kwds)
>>> 
>>> 
>>> d = dict(x=1, y=2)
>>> d.update(y=3, z=4)
>>> d
{'y': 3, 'x': 1, 'z': 4}
>>> d.update([('a', 5), ('z', 6)])
>>> d
{'y': 3, 'x': 1, 'z': 6, 'a': 5}
>>> d.update({'b':7, 'a': 8})
>>> d
{'a': 8, 'b': 7, 'y': 3, 'x': 1, 'z': 6}
>>> # dict()   dict(d)   dict(lot)     dict(kwds)
>>> # d.update()  d.update(d)   d.update(lot)    d.update(kwds)
>>> 
>>> class D(dict):
	def update(self):
		raise RuntimeError

	
>>> D(x=1, y=2)
{'y': 2, 'x': 1}
>>> D(x=1, y=2).update()

Traceback (most recent call last):
  File "<pyshell#93>", line 1, in <module>
    D(x=1, y=2).update()
  File "<pyshell#91>", line 3, in update
    raise RuntimeError
RuntimeError
>>> 
>>> 
>>> class D(dict):
	def __init__(self):
		raise RuntimeError

	
>>> d = D()

Traceback (most recent call last):
  File "<pyshell#99>", line 1, in <module>
    d = D()
  File "<pyshell#98>", line 3, in __init__
    raise RuntimeError
RuntimeError
>>> class D(dict):
	def __init__(self, *args, **kwds):
		print 'Called with', *args, **kwds
		dict.__init__(self, *args, **kwds)
		
SyntaxError: invalid syntax
>>> class D(dict):
	def __init__(self, *args, **kwds):
		print 'Called with', args, kwds
		dict.__init__(self, *args, **kwds)

		
>>> d = D(x=1, y=2)
Called with () {'y': 2, 'x': 1}
>>> d
{'y': 2, 'x': 1}
>>> d.update(z=3)
>>> d
{'y': 2, 'x': 1, 'z': 3}
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> dir(t)
['RUBBER_RATIO', '_Circle__perimeter', '_Tire__perimeter', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'angle_to_grade', 'area', 'from_bbd', 'perimeter', 'radius', 'version']
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10.0
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10 random circles
seeded using Jenny's number: 8675309
The average area is 1.0

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30.0
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> c.__dict__
{'diameter': 17.677669529663685}
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(12)
>>> c.__dict__
{'diameter': 24.0}
>>> c.radius = 30
>>> c.__dict__
{'diameter': 60.0}
>>> c.radius
30.0
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10.0
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10000 random circles
seeded using Jenny's number: 8675309
The average area is 1.04170

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30.0
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> 
>>> c.__class__
<class 'circuitous.Circle'>
>>> c.__dict__
{'diameter': 17.677669529663685}
>>> import sys
>>> sys.getsizeof(())
56
>>> sys.getsizeof((10,))
64
>>> sys.getsizeof((10, 20))
72
>>> sys.getsizeof((10, 20, 30))
80
>>> # tuple size = 56 + len(t)*8
>>> sys.getsizeof({})
280
>>> sys.getsizeof({'a': 1})
280
>>> 
>>> 
>>> c.__dict__
{'diameter': 17.677669529663685}
>>> c.color = 'red'
>>> c.__dict__
{'color': 'red', 'diameter': 17.677669529663685}
>>> 280 / 64.
4.375
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10.0
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10000 random circles
seeded using Jenny's number: 8675309
The average area is 1.04170

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30.0
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> c.__dict__

Traceback (most recent call last):
  File "<pyshell#131>", line 1, in <module>
    c.__dict__
AttributeError: 'Circle' object has no attribute '__dict__'
>>> c.color = 'red'

Traceback (most recent call last):
  File "<pyshell#132>", line 1, in <module>
    c.color = 'red'
AttributeError: 'Circle' object has no attribute 'color'
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> c = Circle(10)
>>> c.color  = 'red'
>>> c.diameter
20.0
>>> c.radius
10.0
>>> c.width = 50

Traceback (most recent call last):
  File "<pyshell#137>", line 1, in <module>
    c.width = 50
AttributeError: 'Circle' object has no attribute 'width'
>>> dir(c)
['_Circle__perimeter', '__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'angle_to_grade', 'area', 'color', 'diameter', 'from_bbd', 'get_radius', 'perimeter', 'radius', 'set_radius', 'version']
>>> c.diameter
20.0
>>> getattr(c, 'diameter')
20.0
>>> c.__slots__
['diameter', 'color']
>>> 
>>> 
>>> 
========= RESTART: /Users/raymond/Dropbox/Public/sj139/circuitous.py =========
>>> help(c)

Traceback (most recent call last):
  File "<pyshell#144>", line 1, in <module>
    help(c)
NameError: name 'c' is not defined
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.8
A circle with a radius of 10.0
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.8
preliminary study using 10000 random circles
seeded using Jenny's number: 8675309
The average area is 1.04170

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30.0
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> help(c)
Help on Circle in module circuitous object:

class Circle(__builtin__.object)
 |  Advanced circle analytic toolkit
 |  
 |  Methods defined here:
 |  
 |  __init__(self, radius)
 |      # The use of "self" is a cultural norm
 |      # Parameter names are user visible, part of the API and should be spelled-out.
 |      # Spelling-out avoids cultural bias for abbreviations.  Networking IS a common culture.
 |      # When copying from one namespace to another, we generally keep the name the same.
 |  
 |  __repr__(self)
 |      # Best practice for repr is to look like how the object COULD have been created
 |      # Don't assume that "self" means you; instead, it could be one of your children
 |  
 |  area(self)
 |      Perform quadrature on a planar shape of uniform revolution
 |  
 |  get_radius(self)
 |  
 |  perimeter(self)
 |      Compute the closed line integral for the locus of points equidistant from a given point
 |  
 |  set_radius(self, radius)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_bbd(cls, bbd) from __builtin__.type
 |      Construct a new circle from a bounding box diagonal
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  angle_to_grade(angle)
 |      Convert an inclinometer reading in degrees into a percent grade
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  diameter
 |  
 |  radius
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  version = Version(major=0, minor=8, micro=1)

>>> 
>>> import gc
>>> gc.collect()
0
>>> 
>>> 
>>> class A:
	pass

>>> a = A()
>>> a.x = 10
>>> a.y = a
>>> del a
>>> gc.collect()
2
>>> # slots  --> revisit
>>> # property -> orange belt  -> black property
>>> # fun:   password cracker       twitter
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
False
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': 'brazil',
 'denis': 'sharapova',
 'jeff': 'cisco',
 'raymondh': 'superman',
 'steven': 'seahawks'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> hashlib.md5('superman').hexdigest()
'84d961568a65073a3bcf0eb216b2a576'
>>> hashlib.sha1('superman').hexdigest()
'18c28604dd31094a8d69dae60f1bcd347f1afc5a'
>>> hashlib.sha256('superman').hexdigest()
'73cd1b16c4fb83061ad18a0b29b9643a68d4640075a466dc9e51682f84a847f5'
>>> hashlib.sha512('superman').hexdigest()
'9ad0d01d1766bb60025ba3403e851d1493a1ce2f14bdcf14d198f4a49e083f4547a6e5f9908444aad02d8d2383fbc74af021c7ee797ea13254c6603de76291b8'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': '90d014520eed41efb06dc1736acb362a613988ee',
 'denis': 'ee427be01c4bd1867675d80175c70db729173e81',
 'jeff': '7af78c911d5b48bea1dc2449d9d89513abeb4be5',
 'raymondh': '18c28604dd31094a8d69dae60f1bcd347f1afc5a',
 'steven': '317926c9c29b5802a362fcae1eeb74ebae239e55'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': '6e5fa4d9c48ca921c0a2ce1e64c9ae6f',
 'denis': '465b62d32a81df52f61fd5f075d67215',
 'jeff': 'dfeaf10390e560aea745ccba53e044ed',
 'raymondh': '84d961568a65073a3bcf0eb216b2a576',
 'steven': '7b4f86d3e54832dc7df197ed3c9d4172'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
>>> 
password, 32027

123456, 25969

12345678, 8667

1234, 5786

qwerty, 5455

12345, 4523

dragon, 4321

pussy, 3945

baseball, 3739

football, 3682

letmein, 3536

monkey, 3487

696969, 3345

abc123, 3310

mustang, 3289

michael, 3249

shadow, 3209

master, 3182

jennifer, 2581

111111, 2570

2000, 2550

jordan, 2538

superman, 2523

harley, 2485

1234567, 2479

fuckme, 2378

hunter, 2377

fuckyou, 2362

trustno1, 2347

ranger, 2265

buster, 2254

thomas, 2194

tigger, 2192

robert, 2176

=============================== RESTART: Shell ===============================
>>> line

Traceback (most recent call last):
  File "<pyshell#170>", line 1, in <module>
    line
NameError: name 'line' is not defined
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
password
123456
12345678
1234
qwerty
12345
dragon
pussy
baseball
football
letmein
monkey
696969
abc123
mustang
michael
shadow
master
jennifer
111111
2000
jordan
superman
harley
1234567
fuckme
hunter
fuckyou
trustno1
ranger
buster
thomas
tigger
robert
soccer
fuck
batman
test
pass
killer
hockey
george
charlie
andrew
michelle
love
sunshine
jessica
asshole
6969
pepper
daniel
access
123456789
654321
joshua
=============================== RESTART: Shell ===============================
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
password 5f4dcc3b5aa765d61d8327deb882cf99
123456 e10adc3949ba59abbe56e057f20f883e
12345678 25d55ad283aa400af464c76d713c07ad
1234 81dc9bdb52d04dc20036dbd8313ed055
qwerty d8578edf8458ce06fbc5bb76a58c5ca4
12345 827ccb0eea8a706c4c34a16891f84e7b
dragon 8621ffdbc5698829397d97767ac13db3
pussy acc6f2779b808637d04c71e3d8360eeb
baseball 276f8db0b86edaa7fc805516c852c889
football 37b4e2d82900d5e94b8da524fbeb33c0
letmein 0d107d09f5bbe40cade3de5c71e9e9b7
monkey d0763edaa9d9bd2a9516280e9044d885
696969 7d0710824ff191f6a0086a7e3891641e


Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 25, in <module>
    print password, hashpass
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/idlelib/PyShell.py", line 1356, in write
    return self.shell.write(s, self.tags)
KeyboardInterrupt
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': '6e5fa4d9c48ca921c0a2ce1e64c9ae6f',
 'denis': '465b62d32a81df52f61fd5f075d67215',
 'jeff': 'dfeaf10390e560aea745ccba53e044ed',
 'raymondh': '84d961568a65073a3bcf0eb216b2a576',
 'steven': '7b4f86d3e54832dc7df197ed3c9d4172'}
>>> for username, hashpass in userpass.items():
	if hashpass in rainbow:
		print username, rainbow[hashpass]

		
ai brazil
steven seahawks
raymondh superman
jeff cisco
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
ai brazil
steven seahawks
raymondh superman
jeff cisco
>>> # [<expr> for <var> in <iterable>]
>>> [x**2 for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> 
>>> {x**2 for x in range(-10, 10)}
set([64, 1, 100, 0, 49, 9, 16, 81, 25, 4, 36])
>>> # {<expr> for <var> in <iterable>}
>>> 
>>> {x**2: x for x in range(-10, 10)}
{64: 8, 1: 1, 100: -10, 0: 0, 49: 7, 9: 3, 16: 4, 81: 9, 25: 5, 4: 2, 36: 6}
>>> # {<kexpr> : <vexpr> for <var> in <iterable>}
>>> 
>>> 
>>> 
>>> 
>>> d = dict(raymond='red', rachel='blue', matthew='yellow')
>>> d['raymond']
'red'
>>> r = {color: name for name, color in d.items()}
>>> r['yellow']
'matthew'
>>> d
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> r
{'blue': 'rachel', 'red': 'raymond', 'yellow': 'matthew'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': '6e5fa4d9c48ca921c0a2ce1e64c9ae6f',
 'denis': '465b62d32a81df52f61fd5f075d67215',
 'jeff': 'dfeaf10390e560aea745ccba53e044ed',
 'raymondh': '84d961568a65073a3bcf0eb216b2a576',
 'steven': '7b4f86d3e54832dc7df197ed3c9d4172'}
>>> pprint(passuser)
{}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> pprint(userpass)
{'ai': '6e5fa4d9c48ca921c0a2ce1e64c9ae6f',
 'denis': '465b62d32a81df52f61fd5f075d67215',
 'jeff': 'dfeaf10390e560aea745ccba53e044ed',
 'raymondh': '84d961568a65073a3bcf0eb216b2a576',
 'steven': '7b4f86d3e54832dc7df197ed3c9d4172'}
>>> pprint(passuser)
{'465b62d32a81df52f61fd5f075d67215': 'denis',
 '6e5fa4d9c48ca921c0a2ce1e64c9ae6f': 'ai',
 '7b4f86d3e54832dc7df197ed3c9d4172': 'steven',
 '84d961568a65073a3bcf0eb216b2a576': 'raymondh',
 'dfeaf10390e560aea745ccba53e044ed': 'jeff'}
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 55, in <module>
    print passuser[hashpass], passwor
NameError: name 'passwor' is not defined
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh superman
ai brazil
steven seahawks
jeff cisco
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh superman
ai brazil
steven seahawks
jeff cisco
>>> 
>>> 
>>> 'hello'.islower()
True
>>> 'hello'.isupper()
False
>>> 'hello'.isdigit()
False
>>> '123'.isdigit()
True
>>> 'HELLO'.isupper()
True
>>> len('hello')
5
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 53, in <module>
    new_account('jeff', 'cisco'),
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 18, in new_account
    raise ValueError('Passwords must be at least 6 letters')
ValueError: Passwords must be at least 6 letters
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 53, in <module>
    new_account('jeff', 'cisco'),
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 18, in new_account
    raise ValueError('Passwords must be at least 6 letters')
ValueError: Passwords must be at least 6 letters
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh superman
ai brazil
steven seahawks
>>> all([True, True, True, True])
True
>>> all([True, True, False, True])
False
>>> any([True, True, False, True])
True
>>> any([False, False, False])
False
>>> password = 'Superman'
>>> [c.isupper() for c in password]
[True, False, False, False, False, False, False, False]
>>> any([c.isupper() for c in password])
True
>>> any(c.isupper() for c in password)
True
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 56, in <module>
    new_account('raymondh', 'superman')
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 22, in new_account
    raise ValueError('Passwords must be at least 6 letters')
ValueError: Passwords must be at least 6 letters
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 57, in <module>
    new_account('jeff', 'cisco1'),
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 22, in new_account
    raise ValueError('Passwords must be at least 6 letters')
ValueError: Passwords must be at least 6 letters
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
False
False
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> password = 'superman'
>>> password.lower()
'superman'
>>> password.upper()
'SUPERMAN'
>>> password.title()
'Superman'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman
ai Brazil
steven Seahawks
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 60, in <module>
    new_account('raymondh', 'Superman')
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 24, in new_account
    raise ValueError('Passwords must be at least 6 letters, upper and lower and digits')
ValueError: Passwords must be at least 6 letters, upper and lower and digits
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 62, in <module>
    new_account('denis', 'Sharapova')
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 24, in new_account
    raise ValueError('Passwords must be at least 6 letters, upper and lower and digits')
ValueError: Passwords must be at least 6 letters, upper and lower and digits
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 63, in <module>
    new_account('ai', 'Brazil')
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 24, in new_account
    raise ValueError('Passwords must be at least 6 letters, upper and lower and digits')
ValueError: Passwords must be at least 6 letters, upper and lower and digits
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 64, in <module>
    new_account('steven', 'Seahawks')
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 24, in new_account
    raise ValueError('Passwords must be at least 6 letters, upper and lower and digits')
ValueError: Passwords must be at least 6 letters, upper and lower and digits
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
False
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
>>> 'hello world'.upper()
'HELLO WORLD'
>>> 'hello world'.lower()
'hello world'
>>> 'hello world'.title()
'Hello World'
>>> 'hello world'.capitalize()
'Hello world'
>>> 
>>> 
>>> s = 'abcd'
>>> t = [10, 20, 30]
>>> for x in s:
	for y in t:
		print x, y

		
a 10
a 20
a 30
b 10
b 20
b 30
c 10
c 20
c 30
d 10
d 20
d 30
>>> for x in s:
	for y in s:
		print x, y

		
a a
a b
a c
a d
b a
b b
b c
b d
c a
c b
c c
c d
d a
d b
d c
d d
>>> for x in s:
	for y in s:
		for z in t:
			print x, y, z

			
a a 10
a a 20
a a 30
a b 10
a b 20
a b 30
a c 10
a c 20
a c 30
a d 10
a d 20
a d 30
b a 10
b a 20
b a 30
b b 10
b b 20
b b 30
b c 10
b c 20
b c 30
b d 10
b d 20
b d 30
c a 10
c a 20
c a 30
c b 10
c b 20
c b 30
c c 10
c c 20
c c 30
c d 10
c d 20
c d 30
d a 10
d a 20
d a 30
d b 10
d b 20
d b 30
d c 10
d c 20
d c 30
d d 10
d d 20
d d 30
>>> from itertools import product
>>> for t in product('abc', range(4)):
	print t

	
('a', 0)
('a', 1)
('a', 2)
('a', 3)
('b', 0)
('b', 1)
('b', 2)
('b', 3)
('c', 0)
('c', 1)
('c', 2)
('c', 3)
>>> for t in product('abc', range(4), 'xy'):
	print t

	
('a', 0, 'x')
('a', 0, 'y')
('a', 1, 'x')
('a', 1, 'y')
('a', 2, 'x')
('a', 2, 'y')
('a', 3, 'x')
('a', 3, 'y')
('b', 0, 'x')
('b', 0, 'y')
('b', 1, 'x')
('b', 1, 'y')
('b', 2, 'x')
('b', 2, 'y')
('b', 3, 'x')
('b', 3, 'y')
('c', 0, 'x')
('c', 0, 'y')
('c', 1, 'x')
('c', 1, 'y')
('c', 2, 'x')
('c', 2, 'y')
('c', 3, 'x')
('c', 3, 'y')
>>> for t in product('xy', 'xy', 'xy', 'xy'):
	print t

	
('x', 'x', 'x', 'x')
('x', 'x', 'x', 'y')
('x', 'x', 'y', 'x')
('x', 'x', 'y', 'y')
('x', 'y', 'x', 'x')
('x', 'y', 'x', 'y')
('x', 'y', 'y', 'x')
('x', 'y', 'y', 'y')
('y', 'x', 'x', 'x')
('y', 'x', 'x', 'y')
('y', 'x', 'y', 'x')
('y', 'x', 'y', 'y')
('y', 'y', 'x', 'x')
('y', 'y', 'x', 'y')
('y', 'y', 'y', 'x')
('y', 'y', 'y', 'y')
>>> for t in product('xy', repeat=4):
	print t

	
('x', 'x', 'x', 'x')
('x', 'x', 'x', 'y')
('x', 'x', 'y', 'x')
('x', 'x', 'y', 'y')
('x', 'y', 'x', 'x')
('x', 'y', 'x', 'y')
('x', 'y', 'y', 'x')
('x', 'y', 'y', 'y')
('y', 'x', 'x', 'x')
('y', 'x', 'x', 'y')
('y', 'x', 'y', 'x')
('y', 'x', 'y', 'y')
('y', 'y', 'x', 'x')
('y', 'y', 'x', 'y')
('y', 'y', 'y', 'x')
('y', 'y', 'y', 'y')
>>> for t in product(range(2), repeat=4):
	print t

	
(0, 0, 0, 0)
(0, 0, 0, 1)
(0, 0, 1, 0)
(0, 0, 1, 1)
(0, 1, 0, 0)
(0, 1, 0, 1)
(0, 1, 1, 0)
(0, 1, 1, 1)
(1, 0, 0, 0)
(1, 0, 0, 1)
(1, 0, 1, 0)
(1, 0, 1, 1)
(1, 1, 0, 0)
(1, 1, 0, 1)
(1, 1, 1, 0)
(1, 1, 1, 1)
>>> for t in product(range(10), repeat=2):
	print t

	
(0, 0)
(0, 1)
(0, 2)
(0, 3)
(0, 4)
(0, 5)
(0, 6)
(0, 7)
(0, 8)
(0, 9)
(1, 0)
(1, 1)
(1, 2)
(1, 3)
(1, 4)
(1, 5)
(1, 6)
(1, 7)
(1, 8)
(1, 9)
(2, 0)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(2, 5)
(2, 6)
(2, 7)
(2, 8)
(2, 9)
(3, 0)
(3, 1)
(3, 2)
(3, 3)
(3, 4)
(3, 5)
(3, 6)
(3, 7)
(3, 8)
(3, 9)
(4, 0)
(4, 1)
(4, 2)
(4, 3)
(4, 4)
(4, 5)
(4, 6)
(4, 7)
(4, 8)
(4, 9)
(5, 0)
(5, 1)
(5, 2)
(5, 3)
(5, 4)
(5, 5)
(5, 6)
(5, 7)
(5, 8)
(5, 9)
(6, 0)
(6, 1)
(6, 2)
(6, 3)
(6, 4)
(6, 5)
(6, 6)
(6, 7)
(6, 8)
(6, 9)
(7, 0)
(7, 1)
(7, 2)
(7, 3)
(7, 4)
(7, 5)
(7, 6)
(7, 7)
(7, 8)
(7, 9)
(8, 0)
(8, 1)
(8, 2)
(8, 3)
(8, 4)
(8, 5)
(8, 6)
(8, 7)
(8, 8)
(8, 9)
(9, 0)
(9, 1)
(9, 2)
(9, 3)
(9, 4)
(9, 5)
(9, 6)
(9, 7)
(9, 8)
(9, 9)
>>> for t in product(range(3), repeat=3):
	print t

	
(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 1, 0)
(0, 1, 1)
(0, 1, 2)
(0, 2, 0)
(0, 2, 1)
(0, 2, 2)
(1, 0, 0)
(1, 0, 1)
(1, 0, 2)
(1, 1, 0)
(1, 1, 1)
(1, 1, 2)
(1, 2, 0)
(1, 2, 1)
(1, 2, 2)
(2, 0, 0)
(2, 0, 1)
(2, 0, 2)
(2, 1, 0)
(2, 1, 1)
(2, 1, 2)
(2, 2, 0)
(2, 2, 1)
(2, 2, 2)
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> map(type, range(10))
[<type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>, <type 'int'>]
>>> map(str, range(10))
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> map(str, range(15))
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman7
ai Brazil1
steven Seahawks12
jeff Cisco1
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman7
ai 1Brazil

====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman7
ai 1Brazil
steven Seahawks12
jeff Cisco1
>>> # 1:45
>>> pprint(userpass)
{'ai': '3dcef3f12642e4bf36554bbe2418c86e104db10eaf26cb4e458718cefa8c22298dee78619b13aa666529f9f2ff3a16bba6636b9285e642e0fda86683d35c2caf',
 'denis': 'ed1ad03e766f162bb6d17f801e146f74641ecea911db118fc30fbd76314b81fbc10a059eec50e1e7680d333c0f2a1eaf343ca3dd9b1c2b6d192581e109c73487',
 'jeff': '67d5a685ba6f7b78ef5e61ccd681dd1cf011a30f0804308d5e85b578c6794a1c2a2771756253f16041a886fcc4c5b7ef7285793d8f2ffc0a072546993c7e9ca3',
 'raymondh': '9b02df9223af2fcae087648068fcdb3f8ee0e7aa4a0cb338516d975287af26da6af109fd47dde8244e660f95556668ac8df3453609b377d57fd96e08e0dfeff9',
 'steven': '1a621a2c8fc2d348fb49ce6fed6eb7b2ff13940cb64f9814ceafa525a894e7502bc58245fec5d8fad016c69bf0e12d61608e77f9ef57f1bb1d2e99a7822b191b'}
>>> 
>>> 
>>> True
True

>>> import hashlib
>>> hashlib.md5('superman4').hexdigest()
'80f817c91853ef67c01e850f3bac700b'
>>> 
>>> 
>>> hashlib.md5('nedstark').hexdigest()
'042f02488b57a79fe2649889d8f2a757'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman7

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 75, in <module>
    search_common(userpass)
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 60, in search_common
    hashpass = digest(password)
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 11, in digest
    return hashlib.sha512(password + secret).hexdigest()
KeyboardInterrupt
>>> 
>>> 
>>> 
>>> import hashlib
>>> hashlib.md5('superman4' + 'the life expectancy of a stark, targyrian, or lannister is very short').hexdigest()
'02a12d0644c76ae237fd2797ebd51dbb'
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True
raymondh Superman7

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 75, in <module>
    search_common(userpass)
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 60, in search_common
    hashpass = digest(password)
  File "/Users/raymond/Dropbox/Public/sj139/password_cracker.py", line 11, in digest
    return hashlib.sha512(password + salt).hexdigest()
KeyboardInterrupt
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True

====== RESTART: /Users/raymond/Dropbox/Public/sj139/password_cracker.py ======
True
True

=============================== RESTART: Shell ===============================
>>> 
>>> 
>>> 
>>> 
>>> class Person(object):
	def __init__(self, name, age, email):
		self.name = name
		self.age = age
		self.email = email

		
>>> p = Person('Rachel Hettinger', 46, 'rachelh@outlook.com')
>>> import sys
>>> sys.getsizeof(p)
64
>>> sys.getsizeof(p.__dict__)
280
>>> [sys.getsizeof(key) for key in p.__dict__.keys()]
[40, 41, 42]
>>> [sys.getsizeof(value) for values in p.__dict__.values()]

Traceback (most recent call last):
  File "<pyshell#284>", line 1, in <module>
    [sys.getsizeof(value) for values in p.__dict__.values()]
NameError: name 'value' is not defined
>>> [sys.getsizeof(value) for value in p.__dict__.values()]
[24, 53, 56]
>>> class Person(object):
	__slots__ = ['name', 'age', 'email']
	def __init__(self, name, age, email):
		self.name = name
		self.age = age
		self.email = email

		
>>> p = Person('Rachel Hettinger', 46, 'rachelh@outlook.com')
>>> Person.__dict__.keys()
['__module__', 'name', 'age', '__doc__', '__slots__', 'email', '__init__']
>>> Person.__dict__['name']
<member 'name' of 'Person' objects>
>>> sys.getsizeof(p)
72
>>> sys.getsizeof(p.name)
53
>>> sys.getsizeof(p.age)
24
>>> sys.getsizeof(p.email)
56
>>> class Person(object):
	__slots__ = ['name', 'age', 'email', '__dict__']
	def __init__(self, name, age, email):
		self.name = name
		self.age = age
		self.email = email

		
>>> p = Person('Rachel Hettinger', 46, 'rachelh@outlook.com')
>>> p.__dict__
{}
>>> p.color = 'red'
>>> p
<__main__.Person object at 0x10400ef50>
>>> 
>>> 
>>> 
>>> 
>>> issubclass(KeyError, Exception)
True
>>> issubclass(IndexError, Exception)
True
>>> class RaymondError(Exception):
	pass

>>> raise RaymondError('Doh!')

Traceback (most recent call last):
  File "<pyshell#310>", line 1, in <module>
    raise RaymondError('Doh!')
RaymondError: Doh!
>>> e = KeyError('homer')
>>> isinstance(e, KeyError)
True
>>> e.args
('homer',)
>>> 
>>> try:
	raise RaymondError('who learned something new?')
except Exception as e:
	print e.args

	
('who learned something new?',)
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 3, in <module>
    warning.warn('Oops, I did it again.  I played with heart, ...')
NameError: name 'warning' is not defined
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 3
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
Done
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 7
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 8
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!
Done
>>> 
>>> 
>>> 
>>> 


>>> 



>>> 










>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======
11.1803398875

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 10
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
11.1803398875j

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 19
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
14.6969384567

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 21
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!
14.6969384567j
Done
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======
11.1803398875

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
11.1803398875j

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 33
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
14.6969384567

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 35
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
14.6969384567j
Done
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======
11.1803398875
11.1803398875j

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 33
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
14.6969384567

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 35
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!
14.6969384567j
Done
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======
11.1803398875

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
11.1803398875j

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 33
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
14.6969384567

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 35
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
14.6969384567j
Done
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/warnings_demo.py =======

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 26
    warnings.warn('The "user" function is deprecated, use "sqrt" instead', DeprecationWarning)
DeprecationWarning: The "user" function is deprecated, use "sqrt" instead
11.1803398875

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
11.1803398875j

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 35
    warnings.warn('Oops, I did it again.  I played with heart, ...')
UserWarning: Oops, I did it again.  I played with heart, ...
14.6969384567

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 37
    warnings.warn('Python is the best!', RaymondWarning)
RaymondWarning: Python is the best!

Warning (from warnings module):
  File "/Users/raymond/Dropbox/Public/sj139/warnings_demo.py", line 22
    warnings.warn('Taking the square root of a negative number')
UserWarning: Taking the square root of a negative number
14.6969384567j
Done
>>> 
>>> 
>>> import math
>>> math.pi
3.141592653589793
>>> math.pi = 3.2
>>> 
>>> 
>>> import math
>>> math.pi
3.2
>>> from circuitous import Circle
>>> c = Circle(10)
>>> c.area()
320.0
>>> c.perimeter()
64.0
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
>>> help(algebra)
Help on module algebra:

NAME
    algebra - Fancy, expensive package for rich people who have forgotten all math since the 7th grade

FILE
    /Users/raymond/Dropbox/Public/sj139/algebra.py

FUNCTIONS
    area(radius)
        Compute the area of the circle
        
        >>> area(10)
        314.152
    
    area_triangle(base, height)
        Return the area of a triangle
        
        >>> area_triangle(10, 20)
        100.0
    
    quadratic(a, b, c)
        Return the two roots for the quadratic equation:
        
            ax^2 + bx + c = 0
        
        Written in Python as:
        
            a*x**2.0 + b*x + c == 0.0
        
        For example:
        
            >>> x1, x2 = quadratic(a=6, b=28, c=30)
            >>> x1
            -1.6666666666666667
            >>> x2
            -3.0
            >>> 6*x1**2 + 28*x1 + 30
            -3.552713678800501e-15
            >>> 6*x2**2 + 28*x2 + 30
            0.0

DATA
    pi = 3.14152


>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have on good authority that pi is exactly: 3.14152
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have on good authority that π is exactly: 3.14152
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have on good authority that π is exactly: 3.14152
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14152
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is:

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/monkey_patching.py", line 16, in <module>
    print 'The area of the 2nd triangle is:', algebra.area_triangle(5, -40)
  File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 29, in area_triangle
    raise RuntimeError('Imaginary numbers not applicable to Kronecker spaces. '
RuntimeError: Imaginary numbers not applicable to Kronecker spaces. Try resetting microcontroller L145
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is:

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/monkey_patching.py", line 26, in <module>
    print 'The area of the 2nd triangle is:', algebra.area_triangle(5, -40)
  File "/Users/raymond/Dropbox/Public/sj139/monkey_patching.py", line 19, in better_area_triangle
    raise ValueError('Illegal base and height.  No negatives allowed')
ValueError: Illegal base and height.  No negatives allowed
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
Solution to 12x^2 + 23x + 10 is:
(-0.6666666666666666, -1.25)
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
Solution to 12x^2 + 23x + 10 is: (-0.6666666666666666, -1.25)
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
Solution to 12x^2 + 23x + 10 is: (-0.6666666666666666, -1.25)
Solution to 12x^2 + 8x + 10 is:

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/monkey_patching.py", line 34, in <module>
    print algebra.quadratic(a=12, b=8, c=10)
  File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 55, in quadratic
    discriminant = math.sqrt(b**2.0 - 4.0*a*c)
ValueError: math domain error
>>> math.sqrt(5)
2.23606797749979
>>> math.sqrt(-5)

Traceback (most recent call last):
  File "<pyshell#341>", line 1, in <module>
    math.sqrt(-5)
ValueError: math domain error
>>> 3 + 4j
(3+4j)
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
Solution to 12x^2 + 23x + 10 is: (-0.6666666666666666, -1.25)
Solution to 12x^2 + 8x + 10 is:

Traceback (most recent call last):
  File "/Users/raymond/Dropbox/Public/sj139/monkey_patching.py", line 45, in <module>
    print algebra.quadratic(a=12, b=8, c=10)
  File "/Users/raymond/Dropbox/Public/sj139/algebra.py", line 55, in quadratic
    discriminant = math.sqrt(b**2.0 - 4.0*a*c)
ValueError: math domain error
>>> 
====== RESTART: /Users/raymond/Dropbox/Public/sj139/monkey_patching.py ======
I have it on good authority that π is exactly: 3.14159265359
The area of a circle with radius 10 is: 314.159265359
The area of the 1st triangle is: 100.0
The area of the 2nd triangle is: Doh!  Sorry for the negative input
Solution to 12x^2 + 23x + 10 is: (-0.6666666666666666, -1.25)
Solution to 12x^2 + 8x + 10 is:
((-0.3333333333333333+0.8498365855987974j), (-0.3333333333333333-0.8498365855987974j))
>>> 
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p
PriceRange(symbol='CSCO', low=25, high=32)
>>> p.symbol
'CSCO'
>>> p.low
25
>>> p.high
32
>>> p.midpoint
28
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.midpoint
28.5
>>> p.__dict__
{'high': 32, 'symbol': 'CSCO', 'midpoint': 28.5, 'low': 25}
>>> 
>>> p.low = 27
>>> p.high
32
>>> p.midpoint
28.5
>>> p
PriceRange(symbol='CSCO', low=27, high=32)
>>> p.midpoint
28.5
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.__dict__
{'high': 32, 'symbol': 'CSCO', 'low': 25}
>>> p.low
25
>>> p.high
32
>>> p.midpoint()
28.5
>>> p.low = 27
>>> p.midpoint()
29.5
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.__dict__
{'high': 32, 'symbol': 'CSCO', 'low': 25}
>>> p.low
25
>>> p.high
32
>>> p.midpoint
28.5
>>> p.symbol
'CSCO'
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.low
25
>>> p.xyz

Traceback (most recent call last):
  File "<pyshell#369>", line 1, in <module>
    p.xyz
AttributeError: 'PriceRange' object has no attribute 'xyz'
>>> 
>>> 
>>> 
>>> p.low = 'hello'
>>> 
>>> 


>>> 










>>> 


>>> 










>>> 
>>> 
>>> p.symbol
'CSCO'
>>> p.high
32
>>> p.xyz

Traceback (most recent call last):
  File "<pyshell#383>", line 1, in <module>
    p.xyz
AttributeError: 'PriceRange' object has no attribute 'xyz'
>>> 
>>> p.midpoint

Traceback (most recent call last):
  File "<pyshell#385>", line 1, in <module>
    p.midpoint
  File "/Users/raymond/Dropbox/Public/sj139/property_demo.py", line 24, in midpoint
    return (self.low + self.high) / 2
TypeError: cannot concatenate 'str' and 'int' objects
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p
PriceRange(symbol='CSCO', low=25, high=32)
>>> p.low
25
>>> p.high
32
>>> p.midpoint
28.5
>>> p.symbol
'CSCO'
>>> p.low = 28
>>> p.midpoint
30.0
>>> p.__dict__
{'high': 32, 'symbol': 'CSCO', '_low': 28}
>>> p.low
28
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.low
25
>>> p.high
32
>>> p.midpoint
28.5
>>> p.symbol
'CSCO'
>>> p.low = 28
>>> p.midpoint
30.0
>>> p.low = 'hello'

Traceback (most recent call last):
  File "<pyshell#401>", line 1, in <module>
    p.low = 'hello'
  File "/Users/raymond/Dropbox/Public/sj139/property_demo.py", line 39, in set_low
    raise TypeError('Expected int or float')
TypeError: Expected int or float
>>> 
>>> 
>>> 
>>> # PPT XLS DOC
>>> p.high = 'goodbye'
>>> 
>>> 


>>> 












>>> 


















>>> 

>>> p.midpoint

Traceback (most recent call last):
  File "<pyshell#412>", line 1, in <module>
    p.midpoint
  File "/Users/raymond/Dropbox/Public/sj139/property_demo.py", line 24, in midpoint
    def __init__(self, symbol, low, high):
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.low = 'hello'

Traceback (most recent call last):
  File "<pyshell#413>", line 1, in <module>
    p.low = 'hello'
  File "/Users/raymond/Dropbox/Public/sj139/property_demo.py", line 45, in set_low
    raise TypeError('Expected int or float')
TypeError: Expected int or float
>>> p.high = 'goodbye'

Traceback (most recent call last):
  File "<pyshell#414>", line 1, in <module>
    p.high = 'goodbye'
  File "/Users/raymond/Dropbox/Public/sj139/property_demo.py", line 57, in set_high
    raise TypeError('Expected int or float')
TypeError: Expected int or float
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> 
>>> # Python is a consenting adults language
>>> 
>>> 
>>> 
>>> 
>>> x = 10
>>> y = x + 1
>>> y
11
>>> 
>>> x = 10
>>> x = x
>>> 
>>> def f(x):
	return x

>>> f(5)
5
>>> 
>>> 
>>> x = 10
>>> x = f(x)
>>> 
>>> x = 10
>>> 
>>> 
>>> hex(51)
'0x33'
>>> 
>>> hex = f(hex)
>>> hex(51)
'0x33'
>>> f(5)
5
>>> 
>>> 
>>> d = []
>>> def f(x):
	d.append(x.__name__)
	return x

>>> hex = f(hex)
>>> hex(51)
'0x33'
>>> d
['hex']
>>> 
>>> 
>>> 
>>> def square(x):
	return x * x

>>> square = f(square)
>>> square(6)
36
>>> d
['hex', 'square']
>>> 
>>> 
>>> 
>>> 
>>> def track_name(func):
	d.append(func.__name__)
	return func

>>> d = []
>>> 
>>> def square(x):
	return x * x

>>> square = track_name(square)
>>> square(7)
49
>>> d
['square']
>>> 
>>> 
>>> 
>>> d = []
>>> 
>>> @track_name
def cube(x):
	return x ** 3

>>> cube(5)
125
>>> d
['cube']
>>> 
======= RESTART: /Users/raymond/Dropbox/Public/sj139/property_demo.py =======
>>> p.midpoint
28.5
>>> p.low = 28
>>> p.midpoint
30.0
>>> 
======== RESTART: /Users/raymond/Dropbox/Public/sj139/client_code.py ========
Tutorial for Circuitous™
Using Circle version 0.9
A circle with a radius of 10.0
has an area of 314.159265359

DARPA Grant Proposal
to study the average area of circles
using Circuitous version 0.9
preliminary study using 10000 random circles
seeded using Jenny's number: 8675309
The average area is 1.04170

Spec sheet for the cut template: [0.1, 0.2, 0.7]
Circle #1
A rubber circle with a cut radius of 0.1
has a perimeter of 0.628318530718
and a cold area of 0.0314159265359
and a warm area of 0.0380132711084

Circle #2
A rubber circle with a cut radius of 0.2
has a perimeter of 1.25663706144
and a cold area of 0.125663706144
and a warm area of 0.152053084434

Circle #3
A rubber circle with a cut radius of 0.7
has a perimeter of 4.39822971503
and a cold area of 1.53938040026
and a warm area of 1.86265028431

A tire with an inner radius of 30.0
has an inner area of 2827.43338823
and an odometer corrected outer perimeter of 235.619449019

A monster tire has an odometer corrected outer perimeter of 282.743338823

An inclinometer reading of 5° is a 8.7% grade.

A circle with a bounding box diagonal of 25
has a radius of 8.83883476483
an area of 245.436926062
and perimeter of 55.536036727

>>> 
>>> help(property)
Help on class property in module __builtin__:

class property(object)
 |  property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
 |  
 |  fget is a function to be used for getting an attribute value, and likewise
 |  fset is a function for setting, and fdel a function for del'ing, an
 |  attribute.  Typical use is to define a managed attribute x:
 |  
 |  class C(object):
 |      def getx(self): return self._x
 |      def setx(self, value): self._x = value
 |      def delx(self): del self._x
 |      x = property(getx, setx, delx, "I'm the 'x' property.")
 |  
 |  Decorators make defining new properties or modifying existing ones easy:
 |  
 |  class C(object):
 |      @property
 |      def x(self):
 |          "I am the 'x' property."
 |          return self._x
 |      @x.setter
 |      def x(self, value):
 |          self._x = value
 |      @x.deleter
 |      def x(self):
 |          del self._x
 |  
 |  Methods defined here:
 |  
 |  __delete__(...)
 |      descr.__delete__(obj)
 |  
 |  __get__(...)
 |      descr.__get__(obj[, type]) -> value
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __init__(...)
 |      x.__init__(...) initializes x; see help(type(x)) for signature
 |  
 |  __set__(...)
 |      descr.__set__(obj, value)
 |  
 |  deleter(...)
 |      Descriptor to change the deleter on a property.
 |  
 |  getter(...)
 |      Descriptor to change the getter on a property.
 |  
 |  setter(...)
 |      Descriptor to change the setter on a property.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  fdel
 |  
 |  fget
 |  
 |  fset
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T

>>> 
>>> 
>>> 
>>> 
